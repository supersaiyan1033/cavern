[{"G:\\cavern\\frontend\\src\\index.js":"1","G:\\cavern\\frontend\\src\\store.js":"2","G:\\cavern\\frontend\\src\\App.js":"3","G:\\cavern\\frontend\\src\\reportWebVitals.js":"4","G:\\cavern\\frontend\\src\\reducers\\cartReducers.js":"5","G:\\cavern\\frontend\\src\\reducers\\productReducers.js":"6","G:\\cavern\\frontend\\src\\reducers\\userReducers.js":"7","G:\\cavern\\frontend\\src\\reducers\\orderReducers.js":"8","G:\\cavern\\frontend\\src\\components\\Header.js":"9","G:\\cavern\\frontend\\src\\components\\Footer.js":"10","G:\\cavern\\frontend\\src\\screens\\HomeScreen.js":"11","G:\\cavern\\frontend\\src\\screens\\CartScreen.js":"12","G:\\cavern\\frontend\\src\\screens\\LoginScreen.js":"13","G:\\cavern\\frontend\\src\\screens\\ProductScreen.js":"14","G:\\cavern\\frontend\\src\\screens\\ProfileScreen.js":"15","G:\\cavern\\frontend\\src\\screens\\ShippingScreen.js":"16","G:\\cavern\\frontend\\src\\screens\\OrderScreen.js":"17","G:\\cavern\\frontend\\src\\screens\\UserListScreen.js":"18","G:\\cavern\\frontend\\src\\screens\\PlaceOrderScreen.js":"19","G:\\cavern\\frontend\\src\\screens\\UserEditScreen.js":"20","G:\\cavern\\frontend\\src\\screens\\ProductEditScreen.js":"21","G:\\cavern\\frontend\\src\\screens\\RegisterScreen.js":"22","G:\\cavern\\frontend\\src\\screens\\ProductListScreen.js":"23","G:\\cavern\\frontend\\src\\screens\\PaymentScreen.js":"24","G:\\cavern\\frontend\\src\\screens\\OrderListScreen.js":"25","G:\\cavern\\frontend\\src\\components\\SearchBox.js":"26","G:\\cavern\\frontend\\src\\components\\Product.js":"27","G:\\cavern\\frontend\\src\\components\\Paginate.js":"28","G:\\cavern\\frontend\\src\\components\\FormContainer.js":"29","G:\\cavern\\frontend\\src\\components\\ProductCarousel.js":"30","G:\\cavern\\frontend\\src\\components\\Loader.js":"31","G:\\cavern\\frontend\\src\\components\\Message.js":"32","G:\\cavern\\frontend\\src\\components\\CheckoutSteps.js":"33","G:\\cavern\\frontend\\src\\components\\Rating.js":"34","G:\\cavern\\frontend\\src\\constants\\cartConstants.js":"35","G:\\cavern\\frontend\\src\\constants\\userConstants.js":"36","G:\\cavern\\frontend\\src\\constants\\orderConstants.js":"37","G:\\cavern\\frontend\\src\\constants\\productConstants.js":"38","G:\\cavern\\frontend\\src\\actions\\cartActions.js":"39","G:\\cavern\\frontend\\src\\actions\\orderActions.js":"40","G:\\cavern\\frontend\\src\\actions\\userActions.js":"41","G:\\cavern\\frontend\\src\\actions\\productActions.js":"42","G:\\cavern\\frontend\\src\\screens\\VerifiedSellers.js":"43","G:\\cavern\\frontend\\src\\screens\\UnverifiedSellers.js":"44","G:\\cavern\\frontend\\src\\reducers\\adminReducers.js":"45","G:\\cavern\\frontend\\src\\constants\\adminConstants.js":"46","G:\\cavern\\frontend\\src\\actions\\adminActions.js":"47","G:\\cavern\\frontend\\src\\screens\\Admins.js":"48","G:\\cavern\\frontend\\src\\screens\\ReturnProducts.js":"49","G:\\cavern\\frontend\\src\\screens\\DeliverProducts.js":"50"},{"size":614,"mtime":1619715444000,"results":"51","hashOfConfig":"52"},{"size":3360,"mtime":1620655304094,"results":"53","hashOfConfig":"52"},{"size":2835,"mtime":1620661074704,"results":"54","hashOfConfig":"52"},{"size":375,"mtime":1619715444000,"results":"55","hashOfConfig":"52"},{"size":3670,"mtime":1620608324807,"results":"56","hashOfConfig":"52"},{"size":4418,"mtime":1620540485829,"results":"57","hashOfConfig":"52"},{"size":4100,"mtime":1619715444000,"results":"58","hashOfConfig":"52"},{"size":5473,"mtime":1620655410025,"results":"59","hashOfConfig":"52"},{"size":7859,"mtime":1620661100460,"results":"60","hashOfConfig":"52"},{"size":383,"mtime":1620240584000,"results":"61","hashOfConfig":"52"},{"size":1702,"mtime":1620490972975,"results":"62","hashOfConfig":"52"},{"size":5403,"mtime":1620571390755,"results":"63","hashOfConfig":"52"},{"size":3100,"mtime":1620445233567,"results":"64","hashOfConfig":"52"},{"size":12659,"mtime":1620552568631,"results":"65","hashOfConfig":"52"},{"size":9385,"mtime":1620662843925,"results":"66","hashOfConfig":"52"},{"size":1690,"mtime":1620608095681,"results":"67","hashOfConfig":"52"},{"size":10887,"mtime":1620656368588,"results":"68","hashOfConfig":"52"},{"size":3602,"mtime":1619715444000,"results":"69","hashOfConfig":"52"},{"size":7189,"mtime":1620613904237,"results":"70","hashOfConfig":"52"},{"size":4022,"mtime":1619715444000,"results":"71","hashOfConfig":"52"},{"size":8141,"mtime":1619715444000,"results":"72","hashOfConfig":"52"},{"size":9101,"mtime":1620444507045,"results":"73","hashOfConfig":"52"},{"size":5132,"mtime":1619715444000,"results":"74","hashOfConfig":"52"},{"size":1992,"mtime":1620649289792,"results":"75","hashOfConfig":"52"},{"size":3663,"mtime":1620620211169,"results":"76","hashOfConfig":"52"},{"size":1324,"mtime":1620324788000,"results":"77","hashOfConfig":"52"},{"size":1092,"mtime":1620491968921,"results":"78","hashOfConfig":"52"},{"size":887,"mtime":1619715444000,"results":"79","hashOfConfig":"52"},{"size":394,"mtime":1619715444000,"results":"80","hashOfConfig":"52"},{"size":1579,"mtime":1620491985447,"results":"81","hashOfConfig":"52"},{"size":479,"mtime":1619715444000,"results":"82","hashOfConfig":"52"},{"size":375,"mtime":1620474076439,"results":"83","hashOfConfig":"52"},{"size":1645,"mtime":1619715444000,"results":"84","hashOfConfig":"52"},{"size":1957,"mtime":1619715444000,"results":"85","hashOfConfig":"52"},{"size":742,"mtime":1620607509356,"results":"86","hashOfConfig":"52"},{"size":1514,"mtime":1619715444000,"results":"87","hashOfConfig":"52"},{"size":1620,"mtime":1620655083239,"results":"88","hashOfConfig":"52"},{"size":1600,"mtime":1620528115171,"results":"89","hashOfConfig":"52"},{"size":3086,"mtime":1620607834158,"results":"90","hashOfConfig":"52"},{"size":8154,"mtime":1620655605006,"results":"91","hashOfConfig":"52"},{"size":7966,"mtime":1620649098223,"results":"92","hashOfConfig":"52"},{"size":6230,"mtime":1620535608470,"results":"93","hashOfConfig":"52"},{"size":2708,"mtime":1620649098227,"results":"94","hashOfConfig":"52"},{"size":2810,"mtime":1620639177582,"results":"95","hashOfConfig":"52"},{"size":3222,"mtime":1620640882960,"results":"96","hashOfConfig":"52"},{"size":1284,"mtime":1620640168148,"results":"97","hashOfConfig":"52"},{"size":8652,"mtime":1620649098223,"results":"98","hashOfConfig":"52"},{"size":4064,"mtime":1620649098225,"results":"99","hashOfConfig":"52"},{"size":2733,"mtime":1620649098226,"results":"100","hashOfConfig":"52"},{"size":2743,"mtime":1620649098226,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"19uqjaa",{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"104"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"104"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"104"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"104"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"104"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"104"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"104"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"104"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"104"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"104"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"104"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"104"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"202","messages":"203","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"104"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"215","messages":"216","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"G:\\cavern\\frontend\\src\\index.js",[],["217","218"],"G:\\cavern\\frontend\\src\\store.js",["219"],"G:\\cavern\\frontend\\src\\App.js",["220","221"],"G:\\cavern\\frontend\\src\\reportWebVitals.js",[],"G:\\cavern\\frontend\\src\\reducers\\cartReducers.js",["222"],"import {\r\n    CART_ADD_ITEM,\r\n    CART_ADD_REQUEST,\r\n    CART_REMOVE_ITEM,\r\n    CART_REMOVE_REQUEST,\r\n    CART_REMOVE_SUCCESS,\r\n    CART_UPDATE_SUCCESS,\r\n    CART_GET_REQUEST,\r\n    CART_SAVE_SHIPPING_ADDRESS,\r\n    CART_GET_PAYMENT_METHOD,\r\n    CART_GET_SHIPPING_ADDRESS,\r\n    CART_SAVE_PAYMENT_METHOD,\r\n\r\n    CART_CLEAR_ITEMS,\r\n    CART_UPDATE,\r\n    SAVE_SHIPPING_ADDRESS\r\n} from '../constants/cartConstants'\r\n\r\n\r\n\r\nexport const cartReducer = (state = { cartItems: [] }, action) => {\r\n    switch (action.type) {\r\n        case CART_ADD_REQUEST:\r\n             return { loading: true, cartItems: []\r\n               \r\n            }\r\n        case CART_GET_REQUEST:\r\n            return {loading:true,cartItems:[]\r\n               \r\n            }\r\n        case CART_UPDATE:\r\n            return {\r\n                ...state,\r\n                loading:true,\r\n                cartItems:action.payload,\r\n             \r\n\r\n            }\r\n        case CART_UPDATE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading:false,\r\n                cartItems:state.cartItems,\r\n              \r\n            }\r\n        case CART_ADD_ITEM:\r\n            const item = action.payload\r\n            const existItem = state.cartItems.find(x => x.stockId.stockId === item.stockId.stockId)\r\n\r\n            if (existItem) {\r\n                return {\r\n                    ...state,\r\n                    loading:true,\r\n                    cartItems: state.cartItems.map(x =>\r\n                        x.stockId.stockId === existItem.stockId.stockId ? item : x)\r\n                }\r\n\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    loading:false,\r\n                    cartItems: [...state.cartItems, item],\r\n                   \r\n                }\r\n            }\r\n        case CART_REMOVE_REQUEST:\r\n            return {\r\n                loading:true,\r\n                cartItems:state.cartItems,\r\n\r\n            }\r\n        case CART_REMOVE_ITEM:\r\n            return {\r\n                ...state,\r\n                cartItems: state.cartItems.filter(x => x.stockId.stockId !== action.payload),\r\n                loading:true\r\n            }\r\n        case CART_REMOVE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                cartItems:state.cartItems,\r\n                loading:false\r\n            }\r\n\r\n\r\n        case CART_CLEAR_ITEMS:\r\n            return {\r\n                ...state,\r\n                cartItems: []\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addressReducer = (state ={shippingAddress :''},action) =>{\r\n      switch (action.type) {\r\n           case CART_SAVE_SHIPPING_ADDRESS:\r\n            return {\r\n                ...state,\r\n                fetching:true,\r\n                shippingAddress: action.payload,\r\n            }\r\n            case CART_GET_SHIPPING_ADDRESS:\r\n                return {\r\n                    ...state,\r\n                    fetching:false,\r\n                    shippingAddress:state.shippingAddress\r\n                }\r\n            default:\r\n                return state\r\n      }\r\n}\r\n\r\nexport const paymentReducer = (state ={paymentMethod :''},action) =>{\r\n      switch (action.type) {\r\n           case CART_SAVE_PAYMENT_METHOD:\r\n            return {\r\n                ...state,\r\n                getting:true,\r\n                paymentMethod: action.payload,\r\n            }\r\n            case CART_GET_PAYMENT_METHOD:\r\n                return {\r\n                    ...state,\r\n                    getting:false,\r\n                    paymentMethod:state.paymentMethod\r\n                }\r\n            default:\r\n                return state\r\n      }\r\n}","G:\\cavern\\frontend\\src\\reducers\\productReducers.js",[],"G:\\cavern\\frontend\\src\\reducers\\userReducers.js",[],"G:\\cavern\\frontend\\src\\reducers\\orderReducers.js",[],"G:\\cavern\\frontend\\src\\components\\Header.js",["223","224","225","226"],"G:\\cavern\\frontend\\src\\components\\Footer.js",[],"G:\\cavern\\frontend\\src\\screens\\HomeScreen.js",["227","228"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport Product from '../components/Product'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport ProductCarousel from '../components/ProductCarousel'\r\nimport { listProducts } from '../actions/productActions'\r\n\r\n\r\nfunction HomeScreen({ history }) {\r\n    const dispatch = useDispatch()\r\n    const productList = useSelector(state => state.productList)\r\n    const { error, loading, products, page, pages } = productList\r\n\r\n    let keyword = history.location.search\r\n\r\n    useEffect(() => {\r\n        dispatch(listProducts(keyword))\r\n\r\n    }, [dispatch, keyword])\r\n\r\n    return (\r\n        <div>\r\n            {!keyword && <ProductCarousel />}\r\n\r\n            {keyword==''?(<h1>Latest Products</h1>):(<h1>Search Results</h1>)}\r\n            {loading ? <Loader />\r\n                : error ? <Message variant='danger'>{error}</Message>\r\n                    :\r\n                    <div>\r\n                        <Row>\r\n                      \r\n                            {products.map(product => (                                \r\n                                <Col key={product.stockId} sm={12} md={6} lg={4} xl={3}>\r\n                                    <Product product={product} />\r\n                                </Col>\r\n                            ))}\r\n                        </Row>\r\n                        <Paginate page={page} pages={pages} keyword={keyword} />\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","G:\\cavern\\frontend\\src\\screens\\CartScreen.js",["229","230","231"],"import React, { useEffect,useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col, ListGroup, Image, Form, Button, Card } from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport { addToCart, removeFromCart,getCart } from '../actions/cartActions'\r\nimport Loader from '../components/Loader'\r\nimport { CART_UPDATE } from '../constants/cartConstants'\r\n\r\nfunction CartScreen({ match, location, history }) {\r\n    const stockId = match.params.id\r\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\r\n    const dispatch = useDispatch()\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    \r\n    const { cartItems,loading } = cart\r\n    const [fetch,setFetch] = useState(true)\r\n    useEffect(() => {\r\n        if (stockId) {\r\n            dispatch(addToCart(stockId, qty))\r\n            setFetch(false)\r\n            console.log(cartItems)\r\n        }\r\n        else{\r\n            dispatch(getCart())\r\n            console.log(cartItems)\r\n        }\r\n    },\r\n      [dispatch, stockId, qty]\r\n     )\r\n\r\n\r\n    const removeFromCartHandler = (id) => {\r\n        dispatch(removeFromCart(id))\r\n    }\r\n\r\n    const checkoutHandler = () => {\r\n        history.push('/login?redirect=shipping')\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={8}>\r\n                <h1>Shopping Cart</h1>\r\n                    {loading?<Loader/>:\r\n                cartItems? cartItems.length === 0 ? (\r\n                    <Message variant='info'>\r\n                        Your cart is empty <Link to='/'>Go Back</Link>\r\n                    </Message>\r\n                ) : (\r\n                        <ListGroup variant='flush'>\r\n                            {cartItems.map(item => (\r\n                                <ListGroup.Item key={item.stockId.stockId}>\r\n                                    <Row>\r\n                                        <Col md={2}>\r\n                                            <Image src={item.stockId.productId.image} alt={item.stockId.productId.name} fluid rounded />\r\n                                        </Col>\r\n                                        <Col md={3}>\r\n                                            <Link to={`/product/${item.stockId.stockId}`}>{item.stockId.productId.name}</Link>\r\n                                        </Col>\r\n\r\n                                        <Col md={2}>\r\n                                            &#8377;{item.stockId.price}\r\n                                        </Col>\r\n\r\n                                        <Col md={3}>\r\n                                            <Form.Control\r\n                                                as=\"select\"\r\n                                                value={item.quantity}\r\n                                                onChange={(e) => dispatch(addToCart(item.stockId.stockId, Number(e.target.value)))}\r\n                                            >\r\n                                                {\r\n\r\n                                                    [...Array(item.stockId.availableQuantity).keys()].map((x) => (\r\n                                                        <option key={x + 1} value={x + 1}>\r\n                                                            {x + 1}\r\n                                                        </option>\r\n                                                    ))\r\n                                                }\r\n\r\n                                            </Form.Control>\r\n                                        </Col>\r\n\r\n                                        <Col md={1}>\r\n                                            <Button\r\n                                                type='button'\r\n                                                variant='light'\r\n                                                onClick={() => removeFromCartHandler(item.stockId.stockId)}\r\n                                            >\r\n                                                <i className='fas fa-trash'></i>\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                            ))}\r\n                        </ListGroup>\r\n                    ):<Loader/>}\r\n            </Col>\r\n\r\n            <Col md={4}>\r\n               {cartItems&&!loading&&<Card>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Subtotal ({cartItems.reduce((acc, item) => acc + item.quantity, 0)}) items</h2>\r\n                            &#8377;{cartItems.reduce((acc, item) => acc + item.quantity * item.stockId.price, 0).toFixed(2)}\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n\r\n                    <ListGroup.Item>\r\n                        <Button\r\n                            type='button'\r\n                            className='btn-block'\r\n                            disabled={cartItems.length === 0}\r\n                            onClick={checkoutHandler}\r\n                        >\r\n                            Proceed To Checkout\r\n                        </Button>\r\n                    </ListGroup.Item>\r\n\r\n\r\n                </Card>}\r\n            </Col> \r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default CartScreen","G:\\cavern\\frontend\\src\\screens\\LoginScreen.js",[],"G:\\cavern\\frontend\\src\\screens\\ProductScreen.js",["232","233"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap'\r\nimport Rating from '../components/Rating'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listProductDetails, createProductReview } from '../actions/productActions'\r\nimport { PRODUCT_CREATE_REVIEW_RESET, PRODUCT_DETAILS_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductScreen({ match, history }) {\r\n    const [qty, setQty] = useState(1)\r\n    const [rating, setRating] = useState(0)\r\n    const [comment, setComment] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productDetails = useSelector(state => state.productDetails)\r\n    const { loading, error, product } = productDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const productReviewCreate = useSelector(state => state.productReviewCreate)\r\n    const {\r\n        loading: loadingProductReview,\r\n        error: errorProductReview,\r\n        success: successProductReview,\r\n    } = productReviewCreate\r\n\r\n    useEffect(() => {\r\n        dispatch({type:PRODUCT_DETAILS_RESET})\r\n        if (successProductReview) {\r\n            setRating(0)\r\n            setComment('')\r\n            dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\r\n        }\r\n\r\n        dispatch(listProductDetails(match.params.id))\r\n        console.log(product,match.params.id)\r\n    }, [dispatch, match.params.id, successProductReview])\r\n\r\n    const addToCartHandler = () => {\r\n        history.push(`/cart/${match.params.id}?qty=${qty}`)\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(createProductReview(\r\n            product.productId.productId, \r\n            rating,\r\n            comment,\r\n            userInfo.buyerId,\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to='/' className='btn btn-light my-3'>Go Back</Link>\r\n            {loading ?\r\n                <Loader />\r\n                : error\r\n                    ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                         <div>\r\n                        {product.productId?(\r\n                            <div>\r\n                             <Row>\r\n                                 <Col md={6}>\r\n                             \r\n                                    <Image src={product.productId.image} alt={product.productId.name} fluid />\r\n                                </Col>\r\n\r\n\r\n                                <Col md={3}>\r\n                                    <ListGroup variant=\"flush\">\r\n                                       \r\n                                        <ListGroup.Item>\r\n                                            <h3>{product.productId.name}</h3>\r\n                                        </ListGroup.Item>\r\n\r\n                                        <ListGroup.Item>\r\n                                            <Rating value={product.productId.rating} text={`${product.productId.votes} reviews`} color={'#f8e825'} />\r\n                                        </ListGroup.Item>\r\n\r\n                                        <ListGroup.Item>\r\n                                            Price:  &#8377;{product.price}\r\n                                        </ListGroup.Item>\r\n\r\n                                        <ListGroup.Item>\r\n                                            Description: {product.productId.details}\r\n                                        </ListGroup.Item>\r\n                                    </ListGroup>\r\n                                </Col>\r\n\r\n\r\n                                <Col md={3}>\r\n                                    <Card>\r\n                                        <ListGroup variant='flush'>\r\n                                         {!userInfo&&<ListGroup.Item>\r\n                                            <Message variant='info'>Login to Add to cart</Message>\r\n                                        </ListGroup.Item>}\r\n                                            <ListGroup.Item>\r\n                                                <Row>\r\n                                                    <Col>Price:</Col>\r\n                                                    <Col>\r\n                                                        <strong> &#8377;{product.price}</strong>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n                                            <ListGroup.Item>\r\n                                                <Row>\r\n                                                    <Col>Status:</Col>\r\n                                                    <Col>\r\n                                                        {product.availableQuantity > 0 ? 'In Stock' : 'Out of Stock'}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n\r\n                                            {product.availableQuantity > 0 && (\r\n                                                <ListGroup.Item>\r\n                                                    <Row>\r\n                                                        <Col>Qty</Col>\r\n                                                        <Col xs='auto' className='my-1'>\r\n                                                            <Form.Control\r\n                                                                as=\"select\"\r\n                                                                value={qty}\r\n                                                                onChange={(e) => setQty(e.target.value)}\r\n                                                            >\r\n                                                                {\r\n\r\n                                                                    [...Array(product.availableQuantity).keys()].map((x) => (\r\n                                                                        <option key={x + 1} value={x + 1}>\r\n                                                                            {x + 1}\r\n                                                                        </option>\r\n                                                                    ))\r\n                                                                }\r\n\r\n                                                            </Form.Control>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </ListGroup.Item>\r\n                                            )}\r\n\r\n\r\n                                            <ListGroup.Item>\r\n                                                <Button\r\n                                                    onClick={addToCartHandler}\r\n                                                    className='btn-block'\r\n                                                    disabled={product.availableQuantity == 0||!userInfo}\r\n                                                    type='button'>\r\n                                                    Add to Cart\r\n                                                </Button>\r\n                                            </ListGroup.Item>\r\n                                            \r\n                                            \r\n                                        </ListGroup>\r\n                                    </Card>\r\n                                </Col>\r\n                           \r\n                            </Row> \r\n\r\n                            <Row>\r\n                                 <Col md={6}>\r\n                                    <h4>Reviews</h4>\r\n                                    {product.reviews.length === 0 && <Message variant='info'>No Reviews</Message>}\r\n\r\n                                    <ListGroup variant='flush'>\r\n                                        {product.reviews.map((review) => (\r\n                                            <ListGroup.Item key={review.ratingId}>\r\n                                                <strong>{review.buyerId.name}</strong> \r\n                                                <Rating value={review.rating} color='#f8e825' />\r\n                                                <p>{review.reviewedAt.substring(0, 10)}</p>\r\n                                                <p>{review.review}</p>\r\n                                            </ListGroup.Item>\r\n                                        ))}\r\n\r\n                                        <ListGroup.Item>\r\n                                            <h4>Write a review</h4>\r\n\r\n                                            {loadingProductReview && <Loader />}\r\n                                            {successProductReview && <Message variant='success'>Review Submitted</Message>}\r\n                                            {errorProductReview && <Message variant='danger'>{errorProductReview}</Message>}\r\n\r\n                                            {userInfo ? (\r\n                                                <Form onSubmit={submitHandler}>\r\n                                                    <Form.Group controlId='rating'>\r\n                                                        <Form.Label>Rating</Form.Label>\r\n                                                        <Form.Control\r\n                                                            as='select'\r\n                                                            value={rating}\r\n                                                            onChange={(e) => setRating(e.target.value)}\r\n                                                        >\r\n                                                            <option value=''>Select...</option>\r\n                                                            <option value='1'>1 - Poor</option>\r\n                                                            <option value='2'>2 - Fair</option>\r\n                                                            <option value='3'>3 - Good</option>\r\n                                                            <option value='4'>4 - Very Good</option>\r\n                                                            <option value='5'>5 - Excellent</option>\r\n                                                        </Form.Control>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group controlId='comment'>\r\n                                                        <Form.Label>Review</Form.Label>\r\n                                                        <Form.Control\r\n                                                            as='textarea'\r\n                                                            row='5'\r\n                                                            value={comment}\r\n                                                            onChange={(e) => setComment(e.target.value)}\r\n                                                        ></Form.Control>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Button\r\n                                                        disabled={loadingProductReview}\r\n                                                        type='submit'\r\n                                                        variant='primary'\r\n                                                    >\r\n                                                        Submit\r\n                                                    </Button>\r\n\r\n                                                </Form>\r\n                                            ) : (\r\n                                                    <Message variant='info'>Please <Link to='/login'>login</Link> to write a review</Message>\r\n                                                )}\r\n                                        </ListGroup.Item>\r\n                                    </ListGroup>\r\n                                </Col> \r\n                            </Row> \r\n                            </div> \r\n                        ):(\r\n                            <div><h1>Error occured</h1></div>\r\n                        )}\r\n                        </div> \r\n                    )\r\n\r\n            }\r\n\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default ProductScreen\r\n","G:\\cavern\\frontend\\src\\screens\\ProfileScreen.js",["234","235","236","237","238","239","240","241","242","243","244"],"G:\\cavern\\frontend\\src\\screens\\ShippingScreen.js",["245"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\nimport Loader from '../components/Loader'\r\nfunction ShippingScreen({ history }) {\r\n\r\n    const shipping = useSelector(state => state.shipping)\r\n    const { shippingAddress,fetching } = shipping\r\n\r\n    const dispatch = useDispatch()\r\n    const [address, setAddress] = useState(shippingAddress)\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(saveShippingAddress(address))\r\n        history.push('/payment')\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 />\r\n            <h1>Shipping</h1>\r\n           {fetching?<Loader/>: <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='address'>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        as='textarea'\r\n                        type='text'\r\n                        placeholder='Enter address'\r\n                        value={address ? address : ''}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Continue\r\n                </Button>\r\n            </Form>}\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default ShippingScreen\r\n","G:\\cavern\\frontend\\src\\screens\\OrderScreen.js",["246","247","248","249","250","251","252","253","254","255","256","257","258","259","260"],"G:\\cavern\\frontend\\src\\screens\\UserListScreen.js",["261"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listUsers, deleteUser } from '../actions/userActions'\r\n\r\nfunction UserListScreen({ history }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userList = useSelector(state => state.userList)\r\n    const { loading, error, users } = userList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userDelete = useSelector(state => state.userDelete)\r\n    const { success: successDelete } = userDelete\r\n\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listUsers())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n\r\n    }, [dispatch, history, successDelete, userInfo])\r\n\r\n\r\n    const deleteHandler = (id) => {\r\n\r\n        if (window.confirm('Are you sure you want to delete this user?')) {\r\n            dispatch(deleteUser(id))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Users</h1>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>NAME</th>\r\n                                    <th>EMAIL</th>\r\n                                    <th>ADMIN</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {users.map(user => (\r\n                                    <tr key={user._id}>\r\n                                        <td>{user._id}</td>\r\n                                        <td>{user.name}</td>\r\n                                        <td>{user.email}</td>\r\n                                        <td>{user.isAdmin ? (\r\n                                            <i className='fas fa-check' style={{ color: 'green' }}></i>\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}</td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/admin/user/${user._id}/edit`}>\r\n                                                <Button variant='light' className='btn-sm'>\r\n                                                    <i className='fas fa-edit'></i>\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\r\n                                                <i className='fas fa-trash'></i>\r\n                                            </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserListScreen\r\n","G:\\cavern\\frontend\\src\\screens\\PlaceOrderScreen.js",["262","263"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { createOrder } from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\nimport { getCart, getPaymentMethod, getShippingAddress } from '../actions/cartActions'\r\nimport Loader from '../components/Loader'\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const { order, error, success } = orderCreate\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const shipping = useSelector(state=>state.shipping)\r\n    const payment = useSelector(state=>state.payment)\r\n    const {fetching,shippingAddress} = shipping\r\n    const {getting,paymentMethod}  = payment\r\n    const {loading,cartItems} =cart\r\n    console.log(cartItems)\r\n    var itemsPrice = cartItems.reduce((acc, item) => acc + item.stockId.price * item.quantity, 0).toFixed(2)\r\n    var shippingPrice = (itemsPrice > 100 ? 0 : 10).toFixed(2)\r\n    // var taxPrice = Number((0.082) * itemsPrice).toFixed(2)\r\n    var totalPrice = (Number(itemsPrice))\r\n    // + Number(shippingPrice) + Number(taxPrice)).toFixed(2)\r\n\r\n\r\n   \r\n\r\n    useEffect(() => {\r\n         if (!paymentMethod) {\r\n        history.push('/payment')\r\n    }\r\n       dispatch(getCart())\r\n       dispatch(getShippingAddress())\r\n       dispatch(getPaymentMethod())\r\n        console.log(cartItems)\r\n        if (success) {\r\n            history.push(`/order/${order.orderId}`)\r\n            dispatch({ type: ORDER_CREATE_RESET })\r\n        }\r\n    }, [dispatch,success, history])\r\n\r\n    const placeOrder = () => {\r\n        dispatch(createOrder({\r\n            cartItems: cartItems,\r\n            shippingAddress: shippingAddress,\r\n            paymentMethod: paymentMethod,\r\n           itemsPrice: itemsPrice,\r\n          //  shippingPrice: shippingPrice,\r\n        //    taxPrice: taxPrice,\r\n           totalPrice: totalPrice,\r\n       }))\r\n    }\r\n    console.log('hello')\r\n    return (\r\n        <div>\r\n            <CheckoutSteps step1 step2 step3 step4 />\r\n            {!cartItems||loading||fetching||getting?<Loader/>: <Row>\r\n                 <Col md={8}>\r\n                     <ListGroup variant='flush'>\r\n                         <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n\r\n                            <p>\r\n                                <strong>Shipping: </strong>\r\n                                   {shippingAddress} \r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {paymentMethod}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                             {cartItems?cartItems.length === 0 ? <Message variant='info'>\r\n                                Your cart is empty\r\n                            </Message> : (\r\n                                    <ListGroup variant='flush'>\r\n                                        {cartItems.map(item => (\r\n                                         <ListGroup.Item key={item.stockId.stockId}>\r\n                                                <Row>\r\n                                                    <Col md={1}>\r\n                                                        <Image src={item.stockId.productId.image} alt={item.stockId.productId.name} fluid rounded />\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Link to={`/product/${item.stockId.stockId}`}>{item.stockId.productId.name}</Link>\r\n                                                    </Col>\r\n\r\n                                                    <Col md={4}>\r\n                                                        {item.quantity} X &#8377;{item.stockId.price} = &#8377;{(item.quantity * item.stockId.price).toFixed(2)}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item> \r\n                                        ))}\r\n                                    </ListGroup>\r\n                                ):<Loader/>} \r\n                        </ListGroup.Item>  \r\n\r\n                    </ListGroup> \r\n\r\n                </Col> \r\n\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Items:</Col>\r\n                                    <Col>&#8377;{itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping:</Col>\r\n                                    <Col>&#8377;{shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            {/* <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Tax:</Col>\r\n                                    <Col>&#8377;{taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item> */}\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total:</Col>\r\n                                    <Col>&#8377;{totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n\r\n                           {error&& <ListGroup.Item>\r\n                                 <Message variant='danger'>{error}</Message>\r\n                            </ListGroup.Item>}\r\n\r\n                            <ListGroup.Item>\r\n                                <Button\r\n                                    type='button'\r\n                                    className='btn-block'\r\n                                    disabled={cartItems === 0}\r\n                                    onClick={placeOrder}\r\n                                >\r\n                                    Place Order\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","G:\\cavern\\frontend\\src\\screens\\UserEditScreen.js",["264"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n\r\n    const userId = match.params.id\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { error, loading, user } = userDetails\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate)\r\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate\r\n\r\n    useEffect(() => {\r\n\r\n        if (successUpdate) {\r\n            dispatch({ type: USER_UPDATE_RESET })\r\n            history.push('/admin/userlist')\r\n        } else {\r\n\r\n            if (!user.name || user._id !== Number(userId)) {\r\n                dispatch(getUserDetails(userId))\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n                setIsAdmin(user.isAdmin)\r\n            }\r\n        }\r\n\r\n    }, [user, userId, successUpdate, history])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({ _id: user._id, name, email, isAdmin }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to='/admin/userlist'>\r\n                Go Back\r\n            </Link>\r\n\r\n            <FormContainer>\r\n                <h1>Edit User</h1>\r\n                {loadingUpdate && <Loader />}\r\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n\r\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <Form onSubmit={submitHandler}>\r\n\r\n                            <Form.Group controlId='name'>\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='name'\r\n                                    placeholder='Enter name'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='email'>\r\n                                <Form.Label>Email Address</Form.Label>\r\n                                <Form.Control\r\n                                    type='email'\r\n                                    placeholder='Enter Email'\r\n                                    value={email}\r\n                                    onChange={(e) => setEmail(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='isadmin'>\r\n                                <Form.Check\r\n                                    type='checkbox'\r\n                                    label='Is Admin'\r\n                                    checked={isAdmin}\r\n                                    onChange={(e) => setIsAdmin(e.target.checked)}\r\n                                >\r\n                                </Form.Check>\r\n                            </Form.Group>\r\n\r\n                            <Button type='submit' variant='primary'>\r\n                                Update\r\n                        </Button>\r\n\r\n                        </Form>\r\n                    )}\r\n\r\n            </FormContainer >\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default UserEditScreen","G:\\cavern\\frontend\\src\\screens\\ProductEditScreen.js",[],"G:\\cavern\\frontend\\src\\screens\\RegisterScreen.js",["265","266","267"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col,Nav,Tabs,Tab,Sonnet } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { register } from '../actions/userActions'\r\n\r\nfunction RegisterScreen({ location, history }) {\r\n\r\n   \r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [phone,setPhone] = useState('')\r\n    const [address,setAddress] = useState('')\r\n    const [role,setRole] = useState('buyer')\r\n    const [company,setCompany] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    const userRegister = useSelector(state => state.userRegister)\r\n    const { error, loading, userInfo } = userRegister\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            dispatch(register(name,email,phone,address, password,role,company))\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Sign In</h1>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n                 <Tabs defaultActiveKey=\"home\" transition={false} id=\"noanim-tab-example\">\r\n  <Tab eventKey=\"home\" title=\"Buyer\" onSelect={()=>setRole('buyer')}>\r\n    <Form onSubmit={submitHandler}>\r\n    <div style={{'padding':'20px'}}></div>\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='name'\r\n                        placeholder='Enter Name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n               \r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='email'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                 <Form.Group controlId='mobile'>\r\n                    <Form.Label>Mobile No</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter Mobile no'\r\n                        value={phone}\r\n                        onChange={(e) => setPhone(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                 <Form.Group controlId='address'>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter Address'\r\n                        value={address}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='passwordConfirm'>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n              \r\n                <Button type='submit' variant='primary'>\r\n                    Register\r\n                </Button>\r\n\r\n            </Form>\r\n\r\n  </Tab>\r\n  <Tab eventKey=\"profile\" title=\"Seller\" onSelect={()=>setRole('seller')}>\r\n   <Form onSubmit={submitHandler}>\r\n    <div style={{'padding':'20px'}}></div>\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='name'\r\n                        placeholder='Enter Name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n               \r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='email'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                 <Form.Group controlId='mobile'>\r\n                    <Form.Label>Mobile No</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter Mobile no'\r\n                        value={phone}\r\n                        onChange={(e) => setPhone(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                 <Form.Group controlId='company'>\r\n                    <Form.Label>Company</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter Company'\r\n                        value={company}\r\n                        onChange={(e) => setCompany(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                 <Form.Group controlId='address'>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter Address'\r\n                        value={address}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='passwordConfirm'>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n              \r\n                <Button type='submit' variant='primary'>\r\n                    Register\r\n                </Button>\r\n\r\n            </Form>\r\n  </Tab>\r\n \r\n</Tabs>\r\n\r\n           \r\n            <Row className='py-3'>\r\n                <Col>\r\n                    Have an Account? <Link\r\n                        to={redirect ? `/login?redirect=${redirect}` : '/login'}>\r\n                        Sign In\r\n                        </Link>\r\n                </Col>\r\n            </Row>\r\n        </FormContainer >\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","G:\\cavern\\frontend\\src\\screens\\ProductListScreen.js",["268"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport { listProducts, deleteProduct, createProduct } from '../actions/productActions'\r\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductListScreen({ history, match }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productList = useSelector(state => state.productList)\r\n    const { loading, error, products, pages, page } = productList\r\n\r\n    const productDelete = useSelector(state => state.productDelete)\r\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\r\n\r\n    const productCreate = useSelector(state => state.productCreate)\r\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\r\n\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    let keyword = history.location.search\r\n    useEffect(() => {\r\n        dispatch({ type: PRODUCT_CREATE_RESET })\r\n\r\n        if (!userInfo.isAdmin) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (successCreate) {\r\n            history.push(`/admin/product/${createdProduct._id}/edit`)\r\n        } else {\r\n            dispatch(listProducts(keyword))\r\n        }\r\n\r\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct, keyword])\r\n\r\n\r\n    const deleteHandler = (id) => {\r\n\r\n        if (window.confirm('Are you sure you want to delete this product?')) {\r\n            dispatch(deleteProduct(id))\r\n        }\r\n    }\r\n\r\n    const createProductHandler = () => {\r\n        dispatch(createProduct())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row className='align-items-center'>\r\n                <Col>\r\n                    <h1>Products</h1>\r\n                </Col>\r\n\r\n                <Col className='text-right'>\r\n                    <Button className='my-3' onClick={createProductHandler}>\r\n                        <i className='fas fa-plus'></i> Create Product\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            {loadingDelete && <Loader />}\r\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\r\n\r\n\r\n            {loadingCreate && <Loader />}\r\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <div>\r\n                            <Table striped bordered hover responsive className='table-sm'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>ID</th>\r\n                                        <th>NAME</th>\r\n                                        <th>PRICE</th>\r\n                                        <th>CATEGORY</th>\r\n                                        <th>BRAND</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {products.map(product => (\r\n                                        <tr key={product._id}>\r\n                                            <td>{product._id}</td>\r\n                                            <td>{product.name}</td>\r\n                                            <td>${product.price}</td>\r\n                                            <td>{product.category}</td>\r\n                                            <td>{product.brand}</td>\r\n\r\n                                            <td>\r\n                                                <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                                                    <Button variant='light' className='btn-sm'>\r\n                                                        <i className='fas fa-edit'></i>\r\n                                                    </Button>\r\n                                                </LinkContainer>\r\n\r\n                                                <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}>\r\n                                                    <i className='fas fa-trash'></i>\r\n                                                </Button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                            <Paginate pages={pages} page={page} isAdmin={true} />\r\n                        </div>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductListScreen","G:\\cavern\\frontend\\src\\screens\\PaymentScreen.js",["269","270"],"G:\\cavern\\frontend\\src\\screens\\OrderListScreen.js",["271"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listOrders } from '../actions/orderActions'\r\n\r\nfunction OrderListScreen({ history }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const orderList = useSelector(state => state.orderList)\r\n    const { loading, error, orders } = orderList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listOrders())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n\r\n    }, [dispatch, history, userInfo])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Orders</h1>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>USER</th>\r\n                                    <th>DATE</th>\r\n                                    <th>Total</th>\r\n                                    <th>PAID</th>\r\n                                    <th>DELIVERED</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {orders.map(order => (\r\n                                    <tr key={order.orderId}>\r\n                                        <td>{order.orderId}</td>\r\n                                        <td>{order.buyerId.name}</td>\r\n                                        <td>{order.orderedAt.substring(0, 10)}</td>\r\n                                        <td>${order.totalAmount}</td>\r\n\r\n                                        {/* <td>{order.paid=='Yes' ? (\r\n                                            order.paidAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td> */}\r\n\r\n                                        {/* <td>{order.status=='delivered' ? (\r\n                                            order.deliveredAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td> */}\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/order/${order.orderId}`}>\r\n                                                <Button variant='light' className='btn-sm'>\r\n                                                    Details\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderListScreen","G:\\cavern\\frontend\\src\\components\\SearchBox.js",[],"G:\\cavern\\frontend\\src\\components\\Product.js",[],"G:\\cavern\\frontend\\src\\components\\Paginate.js",[],"G:\\cavern\\frontend\\src\\components\\FormContainer.js",[],"G:\\cavern\\frontend\\src\\components\\ProductCarousel.js",[],"G:\\cavern\\frontend\\src\\components\\Loader.js",[],"G:\\cavern\\frontend\\src\\components\\Message.js",[],"G:\\cavern\\frontend\\src\\components\\CheckoutSteps.js",[],"G:\\cavern\\frontend\\src\\components\\Rating.js",[],"G:\\cavern\\frontend\\src\\constants\\cartConstants.js",[],"G:\\cavern\\frontend\\src\\constants\\userConstants.js",[],"G:\\cavern\\frontend\\src\\constants\\orderConstants.js",[],"G:\\cavern\\frontend\\src\\constants\\productConstants.js",[],"G:\\cavern\\frontend\\src\\actions\\cartActions.js",["272"],"import axios from 'axios'\r\nimport {\r\n    CART_ADD_ITEM,\r\n    CART_REMOVE_ITEM,\r\n    CART_GET_REQUEST,\r\n    CART_SAVE_SHIPPING_ADDRESS,\r\n    CART_ADD_REQUEST,\r\n    CART_SAVE_PAYMENT_METHOD,\r\n    CART_GET_PAYMENT_METHOD,\r\n    CART_UPDATE,\r\n    CART_REMOVE_REQUEST,\r\n    CART_REMOVE_SUCCESS,\r\n    CART_UPDATE_SUCCESS,\r\n    CART_GET_SHIPPING_ADDRESS\r\n} from '../constants/cartConstants'\r\n\r\n\r\nexport const addToCart = (id, qty) => async (dispatch, getState) => {\r\n\r\n    dispatch({\r\n        type:CART_ADD_REQUEST\r\n    })\r\n     const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n    const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n    const { data } = await axios.put(`/api/cart/product/${id}`,\r\n         {'buyerId':userInfo.buyerId,'quantity':qty},\r\n        config\r\n    )\r\n    dispatch({\r\n        type: CART_ADD_ITEM,\r\n        payload: data\r\n    })\r\n    const information = await axios.get(`api/mycart/${userInfo.buyerId}`)\r\n    console.log(information)\r\n    dispatch({\r\n        type:CART_UPDATE,\r\n        payload:information.data\r\n    })\r\n    dispatch({\r\n        type:CART_UPDATE_SUCCESS\r\n    })\r\n    // localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\r\n}\r\n\r\nexport const getCart = () => async (dispatch, getState) => {\r\n\r\n    dispatch({\r\n        type:CART_GET_REQUEST\r\n    })\r\n     const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n    const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n  \r\n   \r\n    const information = await axios.get(`api/mycart/${userInfo.buyerId}`)\r\n    console.log(information)\r\n    dispatch({\r\n        type:CART_UPDATE,\r\n        payload:information.data\r\n    })\r\n    dispatch({\r\n        type:CART_UPDATE_SUCCESS\r\n    })\r\n    // localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\r\n}\r\n\r\nexport const removeFromCart = (id) => async (dispatch, getState) => {\r\n    dispatch({\r\n        type:CART_REMOVE_REQUEST\r\n    })\r\n    await axios.delete(`/api/cart/delete/${id}`)\r\n    dispatch({\r\n        type: CART_REMOVE_ITEM,\r\n        payload: id,\r\n    })\r\n    dispatch({\r\n        type:CART_REMOVE_SUCCESS\r\n    })\r\n}\r\n\r\n\r\nexport const saveShippingAddress = (data) => (dispatch) => {\r\n    dispatch({\r\n        type: CART_SAVE_SHIPPING_ADDRESS,\r\n        payload: data,\r\n    })\r\n    dispatch({\r\n        type:CART_GET_SHIPPING_ADDRESS\r\n    })\r\n\r\n    localStorage.setItem('shippingAddress', JSON.stringify(data))\r\n}\r\n\r\nexport const getShippingAddress = () => (dispatch) => {\r\n   \r\n    dispatch({\r\n        type:CART_GET_SHIPPING_ADDRESS\r\n    })\r\n\r\n}\r\n\r\nexport const savePaymentMethod = (data) => (dispatch) => {\r\n    dispatch({\r\n        type: CART_SAVE_PAYMENT_METHOD,\r\n        payload: data,\r\n    })\r\n    dispatch({\r\n        type:CART_GET_PAYMENT_METHOD\r\n    })\r\n\r\n    localStorage.setItem('paymentMethod', JSON.stringify(data))\r\n}\r\nexport const getPaymentMethod = () => (dispatch) => {\r\n    dispatch({\r\n        type:CART_GET_PAYMENT_METHOD\r\n    })\r\n}","G:\\cavern\\frontend\\src\\actions\\orderActions.js",["273","274","275","276","277"],"G:\\cavern\\frontend\\src\\actions\\userActions.js",["278"],"G:\\cavern\\frontend\\src\\actions\\productActions.js",["279","280"],"import axios from 'axios'\r\nimport {\r\n    PRODUCT_LIST_REQUEST,\r\n    PRODUCT_LIST_SUCCESS,\r\n    PRODUCT_LIST_FAIL,\r\n\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAIL,\r\n\r\n    PRODUCT_DELETE_REQUEST,\r\n    PRODUCT_DELETE_SUCCESS,\r\n    PRODUCT_DELETE_FAIL,\r\n\r\n    PRODUCT_CREATE_REQUEST,\r\n    PRODUCT_CREATE_SUCCESS,\r\n    PRODUCT_CREATE_FAIL,\r\n\r\n    PRODUCT_UPDATE_REQUEST,\r\n    PRODUCT_UPDATE_SUCCESS,\r\n    PRODUCT_UPDATE_FAIL,\r\n\r\n    PRODUCT_CREATE_REVIEW_REQUEST,\r\n    PRODUCT_CREATE_REVIEW_SUCCESS,\r\n    PRODUCT_CREATE_REVIEW_FAIL,\r\n\r\n\r\n    PRODUCT_TOP_REQUEST,\r\n    PRODUCT_TOP_SUCCESS,\r\n    PRODUCT_TOP_FAIL,\r\n\r\n} from '../constants/productConstants'\r\n\r\n\r\nexport const listProducts = (keyword = '') => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_LIST_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/products${keyword}`)\r\n        console.log(data)\r\n\r\n        dispatch({\r\n            type: PRODUCT_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listTopProducts = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_TOP_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/products/top/`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_TOP_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_TOP_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listProductDetails = (id) => async (dispatch) => {\r\n    try {\r\n        console.log(id)\r\n        dispatch({ type: PRODUCT_DETAILS_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/product/${id}`)\r\n        console.log(data)\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deleteProduct = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/products/delete/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: PRODUCT_DELETE_SUCCESS,\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const createProduct = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/products/create/`,\r\n            {},\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_CREATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const updateProduct = (product) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/products/update/${product._id}/`,\r\n            product,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const createProductReview = (productId, rating,review,userId) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                // Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/products/${productId}/reviews/`,\r\n            {'review':review,'rating':rating,'userId':userId},\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}","G:\\cavern\\frontend\\src\\screens\\VerifiedSellers.js",["281","282","283","284","285","286","287","288"],"G:\\cavern\\frontend\\src\\screens\\UnverifiedSellers.js",["289","290","291","292","293","294","295","296"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button,Table, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { unverifiedSeller } from '../actions/adminActions'\r\nimport { verifySeller } from '../actions/adminActions'\r\nimport HomeScreen from './HomeScreen'\r\n\r\nfunction UnverifiedSellers ({history}){\r\n    const dispatch = useDispatch()\r\n    const data = useSelector(state => state.unverifiedSellers)\r\n    const userLogin = useSelector(state=>state.userLogin)\r\n    const {userInfo} = userLogin\r\n    const {error,loading,unverifiedSellers} = data\r\n\r\n    useEffect(() => {\r\n        if(!userInfo)\r\n        {\r\n            history.push('/')\r\n        }\r\n        dispatch(unverifiedSeller())\r\n    },[dispatch,userInfo])\r\n    console.log(unverifiedSellers)\r\n    return (\r\n        <div>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    :unverifiedSellers\r\n                       ? (\r\n                           <div>\r\n                               <h1>Unverified Sellers</h1>\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th> Name</th>\r\n                                    <th>Email</th>\r\n                                    <th>Company</th>\r\n                                    <th>Verify</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                             <tbody>\r\n                                {unverifiedSellers.map(data => (\r\n                                    <tr key={data.sellerId}>\r\n                                        <td>{data.name}</td>\r\n                                        <td>{data.email}</td>\r\n                                        <td>{data.company}</td>\r\n                                        <td>\r\n                                            <Button  onClick={()=>dispatch(verifySeller(data.sellerId))} >Approve</Button>\r\n                                        </td>\r\n                                     </tr>\r\n                                ))}\r\n                            </tbody> \r\n                        </Table>\r\n                        </div>\r\n                    )\r\n                      :\r\n                      <div>\r\n                           <h1>Home</h1>\r\n                       </div>\r\n                    }\r\n                    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UnverifiedSellers","G:\\cavern\\frontend\\src\\reducers\\adminReducers.js",[],"G:\\cavern\\frontend\\src\\constants\\adminConstants.js",[],"G:\\cavern\\frontend\\src\\actions\\adminActions.js",["297","298"],"G:\\cavern\\frontend\\src\\screens\\Admins.js",["299","300","301","302","303","304"],"G:\\cavern\\frontend\\src\\screens\\ReturnProducts.js",["305","306","307","308","309","310","311","312"],"G:\\cavern\\frontend\\src\\screens\\DeliverProducts.js",["313","314","315","316","317","318","319","320"],{"ruleId":"321","replacedBy":"322"},{"ruleId":"323","replacedBy":"324"},{"ruleId":"325","severity":1,"message":"326","line":94,"column":7,"nodeType":"327","messageId":"328","endLine":94,"endColumn":33},{"ruleId":"325","severity":1,"message":"329","line":15,"column":8,"nodeType":"327","messageId":"328","endLine":15,"endColumn":22},{"ruleId":"325","severity":1,"message":"330","line":16,"column":8,"nodeType":"327","messageId":"328","endLine":16,"endColumn":22},{"ruleId":"325","severity":1,"message":"331","line":16,"column":5,"nodeType":"327","messageId":"328","endLine":16,"endColumn":26},{"ruleId":"325","severity":1,"message":"332","line":3,"column":10,"nodeType":"327","messageId":"328","endLine":3,"endColumn":13},{"ruleId":"325","severity":1,"message":"333","line":3,"column":14,"nodeType":"327","messageId":"328","endLine":3,"endColumn":18},{"ruleId":"334","severity":1,"message":"335","line":29,"column":46,"nodeType":"336","messageId":"337","endLine":29,"endColumn":48},{"ruleId":"334","severity":1,"message":"335","line":59,"column":48,"nodeType":"336","messageId":"337","endLine":59,"endColumn":50},{"ruleId":"325","severity":1,"message":"338","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":25},{"ruleId":"334","severity":1,"message":"335","line":28,"column":21,"nodeType":"336","messageId":"337","endLine":28,"endColumn":23},{"ruleId":"325","severity":1,"message":"339","line":8,"column":10,"nodeType":"327","messageId":"328","endLine":8,"endColumn":21},{"ruleId":"325","severity":1,"message":"340","line":18,"column":12,"nodeType":"327","messageId":"328","endLine":18,"endColumn":17},{"ruleId":"341","severity":1,"message":"342","line":30,"column":7,"nodeType":"343","endLine":30,"endColumn":31,"suggestions":"344"},{"ruleId":"341","severity":1,"message":"345","line":41,"column":8,"nodeType":"343","endLine":41,"endColumn":57,"suggestions":"346"},{"ruleId":"334","severity":1,"message":"335","line":150,"column":89,"nodeType":"336","messageId":"337","endLine":150,"endColumn":91},{"ruleId":"325","severity":1,"message":"347","line":2,"column":10,"nodeType":"327","messageId":"328","endLine":2,"endColumn":14},{"ruleId":"334","severity":1,"message":"335","line":45,"column":54,"nodeType":"336","messageId":"337","endLine":45,"endColumn":56},{"ruleId":"334","severity":1,"message":"335","line":45,"column":94,"nodeType":"336","messageId":"337","endLine":45,"endColumn":96},{"ruleId":"334","severity":1,"message":"335","line":46,"column":33,"nodeType":"336","messageId":"337","endLine":46,"endColumn":35},{"ruleId":"334","severity":1,"message":"335","line":55,"column":37,"nodeType":"336","messageId":"337","endLine":55,"endColumn":39},{"ruleId":"334","severity":1,"message":"348","line":64,"column":22,"nodeType":"336","messageId":"337","endLine":64,"endColumn":24},{"ruleId":"334","severity":1,"message":"335","line":68,"column":36,"nodeType":"336","messageId":"337","endLine":68,"endColumn":38},{"ruleId":"334","severity":1,"message":"335","line":68,"column":72,"nodeType":"336","messageId":"337","endLine":68,"endColumn":74},{"ruleId":"334","severity":1,"message":"335","line":85,"column":35,"nodeType":"336","messageId":"337","endLine":85,"endColumn":37},{"ruleId":"334","severity":1,"message":"335","line":126,"column":35,"nodeType":"336","messageId":"337","endLine":126,"endColumn":37},{"ruleId":"334","severity":1,"message":"335","line":181,"column":26,"nodeType":"336","messageId":"337","endLine":181,"endColumn":28},{"ruleId":"325","severity":1,"message":"349","line":1,"column":27,"nodeType":"327","messageId":"328","endLine":1,"endColumn":36},{"ruleId":"325","severity":1,"message":"350","line":5,"column":10,"nodeType":"327","messageId":"328","endLine":5,"endColumn":22},{"ruleId":"325","severity":1,"message":"351","line":16,"column":12,"nodeType":"327","messageId":"328","endLine":16,"endColumn":20},{"ruleId":"325","severity":1,"message":"352","line":21,"column":19,"nodeType":"327","messageId":"328","endLine":21,"endColumn":26},{"ruleId":"325","severity":1,"message":"353","line":21,"column":27,"nodeType":"327","messageId":"328","endLine":21,"endColumn":34},{"ruleId":"325","severity":1,"message":"354","line":22,"column":12,"nodeType":"327","messageId":"328","endLine":22,"endColumn":17},{"ruleId":"325","severity":1,"message":"355","line":22,"column":27,"nodeType":"327","messageId":"328","endLine":22,"endColumn":34},{"ruleId":"325","severity":1,"message":"356","line":26,"column":22,"nodeType":"327","messageId":"328","endLine":26,"endColumn":32},{"ruleId":"325","severity":1,"message":"357","line":29,"column":22,"nodeType":"327","messageId":"328","endLine":29,"endColumn":36},{"ruleId":"334","severity":1,"message":"335","line":62,"column":31,"nodeType":"336","messageId":"337","endLine":62,"endColumn":33},{"ruleId":"341","severity":1,"message":"358","line":69,"column":8,"nodeType":"343","endLine":69,"endColumn":62,"suggestions":"359"},{"ruleId":"325","severity":1,"message":"360","line":72,"column":11,"nodeType":"327","messageId":"328","endLine":72,"endColumn":32},{"ruleId":"325","severity":1,"message":"361","line":76,"column":11,"nodeType":"327","messageId":"328","endLine":76,"endColumn":25},{"ruleId":"334","severity":1,"message":"335","line":151,"column":78,"nodeType":"336","messageId":"337","endLine":151,"endColumn":80},{"ruleId":"334","severity":1,"message":"348","line":155,"column":95,"nodeType":"336","messageId":"337","endLine":155,"endColumn":97},{"ruleId":"334","severity":1,"message":"348","line":155,"column":121,"nodeType":"336","messageId":"337","endLine":155,"endColumn":123},{"ruleId":"325","severity":1,"message":"338","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":25},{"ruleId":"325","severity":1,"message":"338","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":25},{"ruleId":"341","severity":1,"message":"362","line":47,"column":8,"nodeType":"343","endLine":47,"endColumn":35,"suggestions":"363"},{"ruleId":"341","severity":1,"message":"364","line":43,"column":8,"nodeType":"343","endLine":43,"endColumn":46,"suggestions":"365"},{"ruleId":"325","severity":1,"message":"366","line":3,"column":33,"nodeType":"327","messageId":"328","endLine":3,"endColumn":36},{"ruleId":"325","severity":1,"message":"367","line":3,"column":46,"nodeType":"327","messageId":"328","endLine":3,"endColumn":52},{"ruleId":"334","severity":1,"message":"348","line":39,"column":22,"nodeType":"336","messageId":"337","endLine":39,"endColumn":24},{"ruleId":"325","severity":1,"message":"338","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":25},{"ruleId":"325","severity":1,"message":"349","line":1,"column":27,"nodeType":"327","messageId":"328","endLine":1,"endColumn":36},{"ruleId":"325","severity":1,"message":"368","line":14,"column":13,"nodeType":"327","messageId":"328","endLine":14,"endColumn":26},{"ruleId":"325","severity":1,"message":"338","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":25},{"ruleId":"325","severity":1,"message":"369","line":59,"column":11,"nodeType":"327","messageId":"328","endLine":59,"endColumn":17},{"ruleId":"325","severity":1,"message":"370","line":14,"column":5,"nodeType":"327","messageId":"328","endLine":14,"endColumn":20},{"ruleId":"325","severity":1,"message":"371","line":19,"column":5,"nodeType":"327","messageId":"328","endLine":19,"endColumn":24},{"ruleId":"325","severity":1,"message":"372","line":28,"column":5,"nodeType":"327","messageId":"328","endLine":28,"endColumn":24},{"ruleId":"325","severity":1,"message":"373","line":293,"column":26,"nodeType":"327","messageId":"328","endLine":293,"endColumn":34},{"ruleId":"325","severity":1,"message":"373","line":329,"column":26,"nodeType":"327","messageId":"328","endLine":329,"endColumn":34},{"ruleId":"325","severity":1,"message":"374","line":21,"column":5,"nodeType":"327","messageId":"328","endLine":21,"endColumn":30},{"ruleId":"325","severity":1,"message":"375","line":119,"column":17,"nodeType":"327","messageId":"328","endLine":119,"endColumn":21},{"ruleId":"325","severity":1,"message":"373","line":233,"column":26,"nodeType":"327","messageId":"328","endLine":233,"endColumn":34},{"ruleId":"325","severity":1,"message":"338","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":25},{"ruleId":"325","severity":1,"message":"347","line":2,"column":10,"nodeType":"327","messageId":"328","endLine":2,"endColumn":14},{"ruleId":"325","severity":1,"message":"333","line":3,"column":10,"nodeType":"327","messageId":"328","endLine":3,"endColumn":14},{"ruleId":"325","severity":1,"message":"376","line":3,"column":30,"nodeType":"327","messageId":"328","endLine":3,"endColumn":33},{"ruleId":"325","severity":1,"message":"332","line":3,"column":35,"nodeType":"327","messageId":"328","endLine":3,"endColumn":38},{"ruleId":"325","severity":1,"message":"377","line":7,"column":8,"nodeType":"327","messageId":"328","endLine":7,"endColumn":21},{"ruleId":"325","severity":1,"message":"378","line":10,"column":8,"nodeType":"327","messageId":"328","endLine":10,"endColumn":18},{"ruleId":"341","severity":1,"message":"379","line":25,"column":7,"nodeType":"343","endLine":25,"endColumn":26,"suggestions":"380"},{"ruleId":"325","severity":1,"message":"338","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":25},{"ruleId":"325","severity":1,"message":"347","line":2,"column":10,"nodeType":"327","messageId":"328","endLine":2,"endColumn":14},{"ruleId":"325","severity":1,"message":"333","line":3,"column":10,"nodeType":"327","messageId":"328","endLine":3,"endColumn":14},{"ruleId":"325","severity":1,"message":"376","line":3,"column":30,"nodeType":"327","messageId":"328","endLine":3,"endColumn":33},{"ruleId":"325","severity":1,"message":"332","line":3,"column":35,"nodeType":"327","messageId":"328","endLine":3,"endColumn":38},{"ruleId":"325","severity":1,"message":"377","line":7,"column":8,"nodeType":"327","messageId":"328","endLine":7,"endColumn":21},{"ruleId":"325","severity":1,"message":"378","line":10,"column":8,"nodeType":"327","messageId":"328","endLine":10,"endColumn":18},{"ruleId":"341","severity":1,"message":"379","line":25,"column":7,"nodeType":"343","endLine":25,"endColumn":26,"suggestions":"381"},{"ruleId":"325","severity":1,"message":"382","line":15,"column":5,"nodeType":"327","messageId":"328","endLine":15,"endColumn":26},{"ruleId":"325","severity":1,"message":"383","line":19,"column":5,"nodeType":"327","messageId":"328","endLine":19,"endColumn":27},{"ruleId":"325","severity":1,"message":"347","line":2,"column":10,"nodeType":"327","messageId":"328","endLine":2,"endColumn":14},{"ruleId":"325","severity":1,"message":"376","line":3,"column":40,"nodeType":"327","messageId":"328","endLine":3,"endColumn":43},{"ruleId":"325","severity":1,"message":"332","line":3,"column":45,"nodeType":"327","messageId":"328","endLine":3,"endColumn":48},{"ruleId":"325","severity":1,"message":"377","line":7,"column":8,"nodeType":"327","messageId":"328","endLine":7,"endColumn":21},{"ruleId":"325","severity":1,"message":"378","line":11,"column":8,"nodeType":"327","messageId":"328","endLine":11,"endColumn":18},{"ruleId":"341","severity":1,"message":"379","line":29,"column":7,"nodeType":"343","endLine":29,"endColumn":26,"suggestions":"384"},{"ruleId":"325","severity":1,"message":"338","line":1,"column":17,"nodeType":"327","messageId":"328","endLine":1,"endColumn":25},{"ruleId":"325","severity":1,"message":"347","line":2,"column":10,"nodeType":"327","messageId":"328","endLine":2,"endColumn":14},{"ruleId":"325","severity":1,"message":"333","line":3,"column":10,"nodeType":"327","messageId":"328","endLine":3,"endColumn":14},{"ruleId":"325","severity":1,"message":"376","line":3,"column":30,"nodeType":"327","messageId":"328","endLine":3,"endColumn":33},{"ruleId":"325","severity":1,"message":"332","line":3,"column":35,"nodeType":"327","messageId":"328","endLine":3,"endColumn":38},{"ruleId":"325","severity":1,"message":"377","line":7,"column":8,"nodeType":"327","messageId":"328","endLine":7,"endColumn":21},{"ruleId":"325","severity":1,"message":"378","line":10,"column":8,"nodeType":"327","messageId":"328","endLine":10,"endColumn":18},{"ruleId":"341","severity":1,"message":"379","line":25,"column":7,"nodeType":"343","endLine":25,"endColumn":26,"suggestions":"385"},{"ruleId":"325","severity":1,"message":"338","line":2,"column":17,"nodeType":"327","messageId":"328","endLine":2,"endColumn":25},{"ruleId":"325","severity":1,"message":"347","line":3,"column":10,"nodeType":"327","messageId":"328","endLine":3,"endColumn":14},{"ruleId":"325","severity":1,"message":"333","line":4,"column":10,"nodeType":"327","messageId":"328","endLine":4,"endColumn":14},{"ruleId":"325","severity":1,"message":"376","line":4,"column":30,"nodeType":"327","messageId":"328","endLine":4,"endColumn":33},{"ruleId":"325","severity":1,"message":"332","line":4,"column":35,"nodeType":"327","messageId":"328","endLine":4,"endColumn":38},{"ruleId":"325","severity":1,"message":"377","line":8,"column":8,"nodeType":"327","messageId":"328","endLine":8,"endColumn":21},{"ruleId":"325","severity":1,"message":"378","line":11,"column":8,"nodeType":"327","messageId":"328","endLine":11,"endColumn":18},{"ruleId":"341","severity":1,"message":"379","line":26,"column":7,"nodeType":"343","endLine":26,"endColumn":26,"suggestions":"386"},"no-native-reassign",["387"],"no-negated-in-lhs",["388"],"no-unused-vars","'shippingAddressFromStorage' is assigned a value but never used.","Identifier","unusedVar","'UserListScreen' is defined but never used.","'UserEditScreen' is defined but never used.","'SAVE_SHIPPING_ADDRESS' is defined but never used.","'Col' is defined but never used.","'Form' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'CART_UPDATE' is defined but never used.","'fetch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'cartItems'. Either include it or remove the dependency array.","ArrayExpression",["389"],"React Hook useEffect has a missing dependency: 'product'. Either include it or remove the dependency array.",["390"],"'Link' is defined but never used.","Expected '!==' and instead saw '!='.","'useEffect' is defined but never used.","'PayPalButton' is defined but never used.","'sdkReady' is assigned a value but never used.","'succeed' is assigned a value but never used.","'mistake' is assigned a value but never used.","'wrong' is assigned a value but never used.","'success' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","'loadingDeliver' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["391"],"'successPaymentHandler' is assigned a value but never used.","'deliverHandler' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'cartItems', 'order.orderId', and 'paymentMethod'. Either include them or remove the dependency array.",["392"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["393"],"'Nav' is defined but never used.","'Sonnet' is defined but never used.","'paymentMethod' is assigned a value but never used.","'config' is assigned a value but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","'userInfo' is assigned a value but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","'data' is assigned a value but never used.","'Row' is defined but never used.","'FormContainer' is defined but never used.","'HomeScreen' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["394"],["395"],"'RETURN_PRODUCTS_RESET' is defined but never used.","'DELIVER_PRODUCTS_RESET' is defined but never used.",["396"],["397"],["398"],"no-global-assign","no-unsafe-negation",{"desc":"399","fix":"400"},{"desc":"401","fix":"402"},{"desc":"403","fix":"404"},{"desc":"405","fix":"406"},{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"409","fix":"411"},{"desc":"409","fix":"412"},{"desc":"409","fix":"413"},{"desc":"409","fix":"414"},"Update the dependencies array to be: [dispatch, stockId, qty, cartItems]",{"range":"415","text":"416"},"Update the dependencies array to be: [dispatch, match.params.id, product, successProductReview]",{"range":"417","text":"418"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, userInfo, history]",{"range":"419","text":"420"},"Update the dependencies array to be: [dispatch, success, history, paymentMethod, cartItems, order.orderId]",{"range":"421","text":"422"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"423","text":"424"},"Update the dependencies array to be: [dispatch, history, userInfo]",{"range":"425","text":"426"},{"range":"427","text":"426"},{"range":"428","text":"426"},{"range":"429","text":"426"},{"range":"430","text":"426"},[1080,1104],"[dispatch, stockId, qty, cartItems]",[1580,1629],"[dispatch, match.params.id, product, successProductReview]",[2597,2651],"[dispatch, order, orderId, successPay, successDeliver, userInfo, history]",[1837,1864],"[dispatch, success, history, paymentMethod, cartItems, order.orderId]",[1474,1512],"[user, userId, successUpdate, history, dispatch]",[938,957],"[dispatch, history, userInfo]",[946,965],[1098,1117],[943,962],[951,970]]