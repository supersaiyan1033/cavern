[{"G:\\cavern\\frontend\\src\\index.js":"1","G:\\cavern\\frontend\\src\\store.js":"2","G:\\cavern\\frontend\\src\\App.js":"3","G:\\cavern\\frontend\\src\\reportWebVitals.js":"4","G:\\cavern\\frontend\\src\\reducers\\cartReducers.js":"5","G:\\cavern\\frontend\\src\\reducers\\productReducers.js":"6","G:\\cavern\\frontend\\src\\reducers\\userReducers.js":"7","G:\\cavern\\frontend\\src\\reducers\\orderReducers.js":"8","G:\\cavern\\frontend\\src\\components\\Header.js":"9","G:\\cavern\\frontend\\src\\components\\Footer.js":"10","G:\\cavern\\frontend\\src\\screens\\HomeScreen.js":"11","G:\\cavern\\frontend\\src\\screens\\CartScreen.js":"12","G:\\cavern\\frontend\\src\\screens\\LoginScreen.js":"13","G:\\cavern\\frontend\\src\\screens\\ProductScreen.js":"14","G:\\cavern\\frontend\\src\\screens\\ProfileScreen.js":"15","G:\\cavern\\frontend\\src\\screens\\ShippingScreen.js":"16","G:\\cavern\\frontend\\src\\screens\\OrderScreen.js":"17","G:\\cavern\\frontend\\src\\screens\\PlaceOrderScreen.js":"18","G:\\cavern\\frontend\\src\\screens\\RegisterScreen.js":"19","G:\\cavern\\frontend\\src\\screens\\PaymentScreen.js":"20","G:\\cavern\\frontend\\src\\screens\\OrderListScreen.js":"21","G:\\cavern\\frontend\\src\\components\\SearchBox.js":"22","G:\\cavern\\frontend\\src\\components\\Product.js":"23","G:\\cavern\\frontend\\src\\components\\Paginate.js":"24","G:\\cavern\\frontend\\src\\components\\FormContainer.js":"25","G:\\cavern\\frontend\\src\\components\\ProductCarousel.js":"26","G:\\cavern\\frontend\\src\\components\\Loader.js":"27","G:\\cavern\\frontend\\src\\components\\Message.js":"28","G:\\cavern\\frontend\\src\\components\\CheckoutSteps.js":"29","G:\\cavern\\frontend\\src\\components\\Rating.js":"30","G:\\cavern\\frontend\\src\\constants\\cartConstants.js":"31","G:\\cavern\\frontend\\src\\constants\\userConstants.js":"32","G:\\cavern\\frontend\\src\\constants\\orderConstants.js":"33","G:\\cavern\\frontend\\src\\constants\\productConstants.js":"34","G:\\cavern\\frontend\\src\\actions\\cartActions.js":"35","G:\\cavern\\frontend\\src\\actions\\orderActions.js":"36","G:\\cavern\\frontend\\src\\actions\\userActions.js":"37","G:\\cavern\\frontend\\src\\actions\\productActions.js":"38","G:\\cavern\\frontend\\src\\screens\\VerifiedSellers.js":"39","G:\\cavern\\frontend\\src\\screens\\UnverifiedSellers.js":"40","G:\\cavern\\frontend\\src\\reducers\\adminReducers.js":"41","G:\\cavern\\frontend\\src\\constants\\adminConstants.js":"42","G:\\cavern\\frontend\\src\\actions\\adminActions.js":"43","G:\\cavern\\frontend\\src\\screens\\Admins.js":"44","G:\\cavern\\frontend\\src\\screens\\ReturnProducts.js":"45","G:\\cavern\\frontend\\src\\screens\\DeliverProducts.js":"46","G:\\cavern\\frontend\\src\\screens\\AddOldStocks.js":"47","G:\\cavern\\frontend\\src\\screens\\AddNewStocks.js":"48","G:\\cavern\\frontend\\src\\actions\\sellerActions.js":"49","G:\\cavern\\frontend\\src\\constants\\sellerConstants.js":"50","G:\\cavern\\frontend\\src\\reducers\\sellerReducers.js":"51","G:\\cavern\\frontend\\src\\screens\\UserOrderRequests.js":"52","G:\\cavern\\frontend\\src\\screens\\AddOffers.js":"53","G:\\cavern\\frontend\\src\\screens\\RemoveOffers.js":"54"},{"size":614,"mtime":1620697335892,"results":"55","hashOfConfig":"56"},{"size":3549,"mtime":1620780932798,"results":"57","hashOfConfig":"56"},{"size":3431,"mtime":1620867453766,"results":"58","hashOfConfig":"56"},{"size":375,"mtime":1620697335825,"results":"59","hashOfConfig":"56"},{"size":3670,"mtime":1620697335888,"results":"60","hashOfConfig":"56"},{"size":2970,"mtime":1620780844453,"results":"61","hashOfConfig":"56"},{"size":2843,"mtime":1620793527744,"results":"62","hashOfConfig":"56"},{"size":5557,"mtime":1620747797885,"results":"63","hashOfConfig":"56"},{"size":7490,"mtime":1620870860321,"results":"64","hashOfConfig":"56"},{"size":383,"mtime":1620697335908,"results":"65","hashOfConfig":"56"},{"size":1949,"mtime":1620870710836,"results":"66","hashOfConfig":"56"},{"size":5583,"mtime":1620871838151,"results":"67","hashOfConfig":"56"},{"size":3139,"mtime":1620871856667,"results":"68","hashOfConfig":"56"},{"size":14253,"mtime":1620793331314,"results":"69","hashOfConfig":"56"},{"size":9415,"mtime":1620714206489,"results":"70","hashOfConfig":"56"},{"size":1690,"mtime":1620697335746,"results":"71","hashOfConfig":"56"},{"size":10867,"mtime":1620872088836,"results":"72","hashOfConfig":"56"},{"size":7489,"mtime":1620783112600,"results":"73","hashOfConfig":"56"},{"size":9101,"mtime":1620790644559,"results":"74","hashOfConfig":"56"},{"size":2029,"mtime":1620751410247,"results":"75","hashOfConfig":"56"},{"size":3692,"mtime":1620794235747,"results":"76","hashOfConfig":"56"},{"size":1324,"mtime":1620785902973,"results":"77","hashOfConfig":"56"},{"size":1671,"mtime":1620876252713,"results":"78","hashOfConfig":"56"},{"size":887,"mtime":1620697335904,"results":"79","hashOfConfig":"56"},{"size":394,"mtime":1620697335907,"results":"80","hashOfConfig":"56"},{"size":1641,"mtime":1620784154149,"results":"81","hashOfConfig":"56"},{"size":479,"mtime":1620697335905,"results":"82","hashOfConfig":"56"},{"size":375,"mtime":1620697335904,"results":"83","hashOfConfig":"56"},{"size":1645,"mtime":1620697335908,"results":"84","hashOfConfig":"56"},{"size":1957,"mtime":1620697335901,"results":"85","hashOfConfig":"56"},{"size":742,"mtime":1620697335897,"results":"86","hashOfConfig":"56"},{"size":1571,"mtime":1620792366708,"results":"87","hashOfConfig":"56"},{"size":1678,"mtime":1620747820977,"results":"88","hashOfConfig":"56"},{"size":1600,"mtime":1620697335895,"results":"89","hashOfConfig":"56"},{"size":2954,"mtime":1620780417363,"results":"90","hashOfConfig":"56"},{"size":8395,"mtime":1620747981167,"results":"91","hashOfConfig":"56"},{"size":5709,"mtime":1620833207462,"results":"92","hashOfConfig":"56"},{"size":4517,"mtime":1620780328375,"results":"93","hashOfConfig":"56"},{"size":2708,"mtime":1620697335741,"results":"94","hashOfConfig":"56"},{"size":2810,"mtime":1620697335745,"results":"95","hashOfConfig":"56"},{"size":3222,"mtime":1620697335889,"results":"96","hashOfConfig":"56"},{"size":1284,"mtime":1620697335898,"results":"97","hashOfConfig":"56"},{"size":7974,"mtime":1620780436888,"results":"98","hashOfConfig":"56"},{"size":4092,"mtime":1620807558268,"results":"99","hashOfConfig":"56"},{"size":2733,"mtime":1620697335747,"results":"100","hashOfConfig":"56"},{"size":2766,"mtime":1620794179994,"results":"101","hashOfConfig":"56"},{"size":4123,"mtime":1620807939411,"results":"102","hashOfConfig":"56"},{"size":4900,"mtime":1620793568684,"results":"103","hashOfConfig":"56"},{"size":7695,"mtime":1620740893600,"results":"104","hashOfConfig":"56"},{"size":1196,"mtime":1620740893600,"results":"105","hashOfConfig":"56"},{"size":3107,"mtime":1620740893601,"results":"106","hashOfConfig":"56"},{"size":2965,"mtime":1620740894511,"results":"107","hashOfConfig":"56"},{"size":3648,"mtime":1620800495637,"results":"108","hashOfConfig":"56"},{"size":2904,"mtime":1620740894510,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"19uqjaa",{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"112"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"112"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"112"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"112"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"112"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"112"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"112"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"112"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"112"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"112"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"112"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"112"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"112"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"112"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"112"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"112"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"112"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"112"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"112"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"112"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"112"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"112"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"112"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"112"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"112"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"112"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"112"},"G:\\cavern\\frontend\\src\\index.js",[],["251","252"],"G:\\cavern\\frontend\\src\\store.js",["253"],"import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport {\r\n    productListReducer,\r\n    productDetailsReducer,\r\n    productReviewCreateReducer,\r\n    productTopRatedReducer,\r\n} from './reducers/productReducers'\r\n\r\nimport { cartReducer,addressReducer,paymentReducer } from './reducers/cartReducers'\r\n\r\nimport {\r\n    userLoginReducer,\r\n    userRegisterReducer,\r\n    userDetailsReducer,\r\n    userUpdateProfileReducer,\r\n   \r\n} from './reducers/userReducers'\r\n\r\nimport {\r\n    orderCreateReducer,\r\n    orderDetailsReducer,\r\n    orderPayReducer,\r\n    orderListMyReducer,\r\n    orderListReducer,\r\n    orderDeliverReducer,\r\n    cancelOrderReducer,\r\n    returnOrderReducer\r\n} from './reducers/orderReducers'\r\n\r\n/* admin func */\r\nimport {\r\n    verifiedSellersReducer,\r\n    unverifiedSellersReducer,\r\n    adminsListReducer,\r\n    deliverProductsReducer,\r\n    returnProductsReducer\r\n} from './reducers/adminReducers'  \r\n\r\nimport {\r\n    addNewStocksReducer,\r\n    addOldStocksReducer,\r\n    userOrderRequestsReducer,\r\n    addOffersReducer,\r\n    removeOffersReducer\r\n} from './reducers/sellerReducers'\r\n\r\n\r\nconst reducer = combineReducers({\r\n    productList: productListReducer,\r\n    productDetails: productDetailsReducer,\r\n    productReviewCreate: productReviewCreateReducer,\r\n    productTopRated: productTopRatedReducer,\r\n\r\n    cart: cartReducer,\r\n    shipping :addressReducer,\r\n    payment:paymentReducer,\r\n    userLogin: userLoginReducer,\r\n    userRegister: userRegisterReducer,\r\n    userDetails: userDetailsReducer,\r\n    userUpdateProfile: userUpdateProfileReducer,\r\n\r\n    orderCreate: orderCreateReducer,\r\n    orderDetails: orderDetailsReducer,\r\n    orderPay: orderPayReducer,\r\n    orderListMy: orderListMyReducer,\r\n    orderList: orderListReducer,\r\n    orderDeliver: orderDeliverReducer,\r\n    cancelOrder:cancelOrderReducer,\r\n    returnOrder:returnOrderReducer,\r\n\r\n    verifiedSellers:verifiedSellersReducer,\r\n    unverifiedSellers:unverifiedSellersReducer,\r\n\r\n    adminsList:adminsListReducer,\r\n    returnProducts:returnProductsReducer,\r\n    deliverProducts:deliverProductsReducer,\r\n\r\n    addNewStocks:addNewStocksReducer,\r\n    addOldStocks:addOldStocksReducer,\r\n    userOrderRequests:userOrderRequestsReducer,\r\n\r\n    addOffers:addOffersReducer,\r\n    removeOffers:removeOffersReducer\r\n\r\n})\r\n\r\n\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ?\r\n    JSON.parse(localStorage.getItem('cartItems')) : []\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo') ?\r\n    JSON.parse(localStorage.getItem('userInfo')) : null\r\n\r\n\r\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ?\r\n    JSON.parse(localStorage.getItem('shippingAddress')) : ''\r\n\r\n\r\nconst initialState = {\r\n    cart: {\r\n        cartItems: cartItemsFromStorage,\r\n    },\r\n    userLogin: { userInfo: userInfoFromStorage },\r\n    shipping :{\r\n        shippingAddress : ''\r\n    },\r\n    verifiedSellers:{verifiedSellers:[]},\r\n    unverifiedSellers:{unverifiedSellers:[]},\r\n    adminsList :{adminsList:[]},\r\n    deliverProducts:{deliverProducts:[]},\r\n    returnProducts:{returnProducts:[]},\r\n    addNewStocks:{addNewstocks:[]},\r\n    addOldStocks:{addOldStocks:[]},\r\n    userOrderRequests:{userOrderRequests:[]},\r\n    addOffers:{addOffers:[]},\r\n    removeOffers:{removeOffers:[]}\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(reducer, initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\nexport default store","G:\\cavern\\frontend\\src\\App.js",["254","255","256","257","258"],"import { Container } from 'react-bootstrap'\r\nimport { HashRouter as Router, Route,useHistory } from 'react-router-dom'\r\nimport Header from './components/Header'\r\nimport Footer from './components/Footer'\r\nimport HomeScreen from './screens/HomeScreen'\r\nimport ProductScreen from './screens/ProductScreen'\r\nimport CartScreen from './screens/CartScreen'\r\nimport LoginScreen from './screens/LoginScreen'\r\nimport RegisterScreen from './screens/RegisterScreen'\r\nimport ProfileScreen from './screens/ProfileScreen'\r\nimport ShippingScreen from './screens/ShippingScreen'\r\nimport PaymentScreen from './screens/PaymentScreen'\r\nimport PlaceOrderScreen from './screens/PlaceOrderScreen'\r\nimport OrderScreen from './screens/OrderScreen'\r\nimport OrderListScreen from './screens/OrderListScreen'\r\nimport VerifiedSellers from './screens/VerifiedSellers' \r\nimport UnverifiedSellers from './screens/UnverifiedSellers' \r\nimport DeliverProducts from './screens/DeliverProducts' \r\nimport ReturnProducts from './screens/ReturnProducts' \r\nimport AddNewStocks from './screens/AddNewStocks' \r\nimport AddOldStocks from './screens/AddOldStocks' \r\nimport Admins from './screens/Admins'\r\nimport UserOrderRequests from './screens/UserOrderRequests'\r\nimport AddOffers from './screens/AddOffers'\r\nimport RemoveOffers from './screens/RemoveOffers'\r\nimport {useSelector,useDispatch} from 'react-redux'\r\nimport {useState,useEffect} from 'react'\r\nimport { login } from './actions/userActions'\r\nfunction App() {\r\n  const userLogin = useSelector(state =>state.userLogin)\r\n  const {userInfo} = userLogin\r\n  const dispatch = useDispatch()\r\n  let history = useHistory();\r\n\r\n  // useEffect(()=>{\r\n  //  if(!userInfo||userInfo.role)\r\n  //  {\r\n  //    dispatch(login('','',''))\r\n     \r\n  //  }\r\n  //  console.log(userInfo)\r\n   \r\n  // },[dispatch])\r\n\r\n  return (\r\n    <Router>\r\n      <Header history={history} />\r\n      <main className=\"py-3\">\r\n        <Container>\r\n          <Route path='/' component={HomeScreen} exact />\r\n          <Route path='/login' component={LoginScreen} />\r\n          <Route path='/register' component={RegisterScreen} />\r\n          <Route path='/profile' component={ProfileScreen} />\r\n          <Route path='/shipping' component={ShippingScreen} />\r\n          <Route path='/placeorder' component={PlaceOrderScreen} />\r\n          <Route path='/order/:id' component={OrderScreen} />\r\n          <Route path='/payment' component={PaymentScreen} />\r\n          <Route path='/product/:id' component={ProductScreen} />\r\n          <Route path='/cart/:id?' component={CartScreen} />\r\n          <Route path='/verifiedsellers' component={VerifiedSellers} />\r\n          <Route path='/unverifiedsellers' component={UnverifiedSellers} />\r\n          <Route path='/admins' component={Admins} /> \r\n          <Route path='/returnproducts' component={ReturnProducts} />\r\n          <Route path='/deliverproducts' component={DeliverProducts} />\r\n          <Route path='/addoldstocks' component={AddOldStocks} />\r\n          <Route path='/addnewstocks' component={AddNewStocks} />\r\n          <Route path='/userorderrequests' component={UserOrderRequests} />\r\n          <Route path='/addoffers' component={AddOffers} />\r\n          <Route path='/removeoffers' component={RemoveOffers} />\r\n     \r\n\r\n\r\n          <Route path='/admin/orderlist' component={OrderListScreen} /> \r\n        </Container>\r\n      </main>\r\n      <Footer />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","G:\\cavern\\frontend\\src\\reportWebVitals.js",[],"G:\\cavern\\frontend\\src\\reducers\\cartReducers.js",["259"],"import {\r\n    CART_ADD_ITEM,\r\n    CART_ADD_REQUEST,\r\n    CART_REMOVE_ITEM,\r\n    CART_REMOVE_REQUEST,\r\n    CART_REMOVE_SUCCESS,\r\n    CART_UPDATE_SUCCESS,\r\n    CART_GET_REQUEST,\r\n    CART_SAVE_SHIPPING_ADDRESS,\r\n    CART_GET_PAYMENT_METHOD,\r\n    CART_GET_SHIPPING_ADDRESS,\r\n    CART_SAVE_PAYMENT_METHOD,\r\n\r\n    CART_CLEAR_ITEMS,\r\n    CART_UPDATE,\r\n    SAVE_SHIPPING_ADDRESS\r\n} from '../constants/cartConstants'\r\n\r\n\r\n\r\nexport const cartReducer = (state = { cartItems: [] }, action) => {\r\n    switch (action.type) {\r\n        case CART_ADD_REQUEST:\r\n             return { loading: true, cartItems: []\r\n               \r\n            }\r\n        case CART_GET_REQUEST:\r\n            return {loading:true,cartItems:[]\r\n               \r\n            }\r\n        case CART_UPDATE:\r\n            return {\r\n                ...state,\r\n                loading:true,\r\n                cartItems:action.payload,\r\n             \r\n\r\n            }\r\n        case CART_UPDATE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading:false,\r\n                cartItems:state.cartItems,\r\n              \r\n            }\r\n        case CART_ADD_ITEM:\r\n            const item = action.payload\r\n            const existItem = state.cartItems.find(x => x.stockId.stockId === item.stockId.stockId)\r\n\r\n            if (existItem) {\r\n                return {\r\n                    ...state,\r\n                    loading:true,\r\n                    cartItems: state.cartItems.map(x =>\r\n                        x.stockId.stockId === existItem.stockId.stockId ? item : x)\r\n                }\r\n\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    loading:false,\r\n                    cartItems: [...state.cartItems, item],\r\n                   \r\n                }\r\n            }\r\n        case CART_REMOVE_REQUEST:\r\n            return {\r\n                loading:true,\r\n                cartItems:state.cartItems,\r\n\r\n            }\r\n        case CART_REMOVE_ITEM:\r\n            return {\r\n                ...state,\r\n                cartItems: state.cartItems.filter(x => x.stockId.stockId !== action.payload),\r\n                loading:true\r\n            }\r\n        case CART_REMOVE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                cartItems:state.cartItems,\r\n                loading:false\r\n            }\r\n\r\n\r\n        case CART_CLEAR_ITEMS:\r\n            return {\r\n                ...state,\r\n                cartItems: []\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addressReducer = (state ={shippingAddress :''},action) =>{\r\n      switch (action.type) {\r\n           case CART_SAVE_SHIPPING_ADDRESS:\r\n            return {\r\n                ...state,\r\n                fetching:true,\r\n                shippingAddress: action.payload,\r\n            }\r\n            case CART_GET_SHIPPING_ADDRESS:\r\n                return {\r\n                    ...state,\r\n                    fetching:false,\r\n                    shippingAddress:state.shippingAddress\r\n                }\r\n            default:\r\n                return state\r\n      }\r\n}\r\n\r\nexport const paymentReducer = (state ={paymentMethod :''},action) =>{\r\n      switch (action.type) {\r\n           case CART_SAVE_PAYMENT_METHOD:\r\n            return {\r\n                ...state,\r\n                getting:true,\r\n                paymentMethod: action.payload,\r\n            }\r\n            case CART_GET_PAYMENT_METHOD:\r\n                return {\r\n                    ...state,\r\n                    getting:false,\r\n                    paymentMethod:state.paymentMethod\r\n                }\r\n            default:\r\n                return state\r\n      }\r\n}","G:\\cavern\\frontend\\src\\reducers\\productReducers.js",["260","261","262","263","264","265","266","267","268","269","270"],"import {\r\n    PRODUCT_LIST_REQUEST,\r\n    PRODUCT_LIST_SUCCESS,\r\n    PRODUCT_LIST_FAIL,\r\n    PRODUCT_DETAILS_RESET,\r\n\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAIL,\r\n\r\n    PRODUCT_DELETE_REQUEST,\r\n    PRODUCT_DELETE_SUCCESS,\r\n    PRODUCT_DELETE_FAIL,\r\n\r\n    PRODUCT_CREATE_REQUEST,\r\n    PRODUCT_CREATE_SUCCESS,\r\n    PRODUCT_CREATE_FAIL,\r\n    PRODUCT_CREATE_RESET,\r\n\r\n    PRODUCT_UPDATE_REQUEST,\r\n    PRODUCT_UPDATE_SUCCESS,\r\n    PRODUCT_UPDATE_FAIL,\r\n    PRODUCT_UPDATE_RESET,\r\n\r\n    PRODUCT_CREATE_REVIEW_REQUEST,\r\n    PRODUCT_CREATE_REVIEW_SUCCESS,\r\n    PRODUCT_CREATE_REVIEW_FAIL,\r\n    PRODUCT_CREATE_REVIEW_RESET,\r\n\r\n    PRODUCT_TOP_REQUEST,\r\n    PRODUCT_TOP_SUCCESS,\r\n    PRODUCT_TOP_FAIL,\r\n} from '../constants/productConstants'\r\n\r\n\r\nexport const productListReducer = (state = { products: [] }, action) => {\r\n    switch (action.type) {\r\n        case PRODUCT_LIST_REQUEST:\r\n            return { loading: true, products: [] }\r\n\r\n        case PRODUCT_LIST_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                products: action.payload,\r\n                page: action.payload.page,\r\n                pages: action.payload.pages\r\n            }\r\n\r\n        case PRODUCT_LIST_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const productDetailsReducer = (state = {product:{} }, action) => {\r\n    switch (action.type) {\r\n        case PRODUCT_DETAILS_REQUEST:\r\n            return { loading: true, ...state }\r\n\r\n        case PRODUCT_DETAILS_SUCCESS:\r\n            console.log(action.payload)\r\n            return { loading: false, product: action.payload }\r\n\r\n        case PRODUCT_DETAILS_FAIL:\r\n            console.log(action.payload)\r\n            return { loading: false, error: action.payload }\r\n        case PRODUCT_DETAILS_RESET:\r\n            return {loading:true,product:{}}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const productReviewCreateReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case PRODUCT_CREATE_REVIEW_REQUEST:\r\n            return { loading: true }\r\n\r\n        case PRODUCT_CREATE_REVIEW_SUCCESS:\r\n            return { loading: false, success: true, }\r\n\r\n        case PRODUCT_CREATE_REVIEW_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        case PRODUCT_CREATE_REVIEW_RESET:\r\n            return {}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const productTopRatedReducer = (state = { products: [] }, action) => {\r\n    switch (action.type) {\r\n        case PRODUCT_TOP_REQUEST:\r\n            return { loading: true, products: [] }\r\n\r\n        case PRODUCT_TOP_SUCCESS:\r\n            return { loading: false, products: action.payload, }\r\n\r\n        case PRODUCT_TOP_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","G:\\cavern\\frontend\\src\\reducers\\userReducers.js",["271","272","273","274","275","276","277","278","279","280","281"],"import {\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n\r\n    USER_LOGOUT,\r\n    USER_LOGOUT_REQUEST,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_RESET,\r\n\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n\r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n    USER_UPDATE_RESET,\r\n\r\n} from '../constants/userConstants'\r\n\r\n\r\nexport const userLoginReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case USER_LOGIN_REQUEST:\r\n            return { loading: true }\r\n\r\n        case USER_LOGIN_SUCCESS:\r\n            return { loading: false, userInfo: action.payload }\r\n\r\n        case USER_LOGIN_FAIL:\r\n            return { loading: false, error: action.payload }\r\n        case USER_LOGOUT_REQUEST:\r\n            return {loggingOut:true}\r\n\r\n        case USER_LOGOUT:\r\n            return {loggingOut:false}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const userRegisterReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case USER_REGISTER_REQUEST:\r\n            return { loading: true }\r\n\r\n        case USER_REGISTER_SUCCESS:\r\n            return { loading: false, userInfo: action.payload }\r\n\r\n        case USER_REGISTER_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        case USER_LOGOUT:\r\n            return {}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const userDetailsReducer = (state = { user: {} }, action) => {\r\n    switch (action.type) {\r\n        case USER_DETAILS_REQUEST:\r\n            return { ...state, loading: true }\r\n\r\n        case USER_DETAILS_SUCCESS:\r\n            return { loading: false, user: action.payload }\r\n\r\n        case USER_DETAILS_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        case USER_DETAILS_RESET:\r\n            return { user: {} }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const userUpdateProfileReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case USER_UPDATE_PROFILE_REQUEST:\r\n            return { loading: true }\r\n\r\n        case USER_UPDATE_PROFILE_SUCCESS:\r\n            return { loading: false, success: true, userInfo: action.payload }\r\n\r\n        case USER_UPDATE_PROFILE_FAIL:\r\n            return { loading: false, error: action.payload }\r\n\r\n        case USER_UPDATE_PROFILE_RESET:\r\n            return {}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\n","G:\\cavern\\frontend\\src\\reducers\\orderReducers.js",[],"G:\\cavern\\frontend\\src\\components\\Header.js",["282","283","284","285","286","287"],"import {React,useState,useEffect} from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Col,Form , Navbar, Nav, Container, Row, NavDropdown, Spinner } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport SearchBox from './SearchBox'\r\nimport { logout } from '../actions/userActions'\r\n\r\nfunction Header({history}) {\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const [rolling,setRolling] = useState(false)\r\n    const { userInfo,loggingOut } = userLogin\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = () => {\r\n        setRolling(true)\r\n        dispatch(logout())\r\n        setRolling(false)\r\n        // history.push('/login')\r\n        window.location.hash ='/login'\r\n    }\r\n    useEffect(() => {\r\n       \r\n    }, [rolling,userInfo])\r\n\r\n    return (\r\n        <header>\r\n <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\r\n                <Container fluid>\r\n                    <LinkContainer to='/'>\r\n                        <Navbar.Brand>ShoppingCavern</Navbar.Brand>\r\n                    </LinkContainer>\r\n                      <SearchBox />\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                                 {userInfo ?\r\n                                userInfo.role=='buyer'?\r\n                                \r\n                                    <Nav className=\"ml-auto\">\r\n\r\n                                      \r\n\r\n                                        <LinkContainer to='/cart'>\r\n                                        <Nav.Link ><i className=\"fas fa-shopping-cart\"></i>Cart</Nav.Link>\r\n                                        </LinkContainer>\r\n                                        \r\n                                        <NavDropdown title={userInfo.name} id='username'>\r\n                                        <LinkContainer to='/profile'>\r\n                                            <NavDropdown.Item>Profile</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n\r\n                                        {!rolling&& <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>}\r\n                                        {rolling &&<Spinner></Spinner>}\r\n                                        </NavDropdown>\r\n\r\n                                    </Nav>\r\n                                       \r\n                                :userInfo.role=='seller'?\r\n                                 <Nav className = \"ml-auto\">\r\n                                  \r\n\r\n                                        <NavDropdown title='Add Stocks' id='username'>\r\n                                        <LinkContainer to='/addnewstocks'>\r\n                                            <NavDropdown.Item>New</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n                                        <LinkContainer to='/addoldstocks'>\r\n                                            <NavDropdown.Item>Existing</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n                                    </NavDropdown>\r\n\r\n                                    <LinkContainer to='/userorderrequests'>\r\n                                        <Nav.Link>Orders</Nav.Link>\r\n                                    </LinkContainer>\r\n                                    <NavDropdown title='Offers' id='username'>\r\n                                        <LinkContainer to='/addoffers'>\r\n                                            <NavDropdown.Item>Add</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n                                        <LinkContainer to='/removeoffers'>\r\n                                            <NavDropdown.Item>Remove</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n                                    </NavDropdown>\r\n                                    <NavDropdown title={userInfo.name} id='username'>\r\n                                        <LinkContainer to='/profile'>\r\n                                            <NavDropdown.Item>Profile</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n\r\n                                        <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\r\n                                    </NavDropdown>\r\n                                    </Nav>\r\n\r\n                                \r\n                                : \r\n                                    <Nav className=\"ml-auto\">\r\n                                      \r\n                                    <LinkContainer to='/admins'>\r\n                                        <Nav.Link >Admins</Nav.Link>\r\n                                        </LinkContainer>\r\n                                        <NavDropdown title='Sellers' id='adminmenue'>\r\n                                        <LinkContainer to='/unverifiedsellers'>\r\n                                            <NavDropdown.Item>Approve</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n                                        <LinkContainer to='/verifiedsellers'>\r\n                                            <NavDropdown.Item>Remove</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n                                        </NavDropdown>\r\n                                        <NavDropdown title='Products' id='adminmenue'>\r\n                                        <LinkContainer to='/deliverproducts'>\r\n                                            <NavDropdown.Item>Deliver</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n                                        <LinkContainer to='/returnproducts'>\r\n                                            <NavDropdown.Item>Return</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n                                       </NavDropdown>\r\n                                       <NavDropdown title='Account' id='adminmenue'>\r\n                                       <LinkContainer to='/profile'>\r\n                                            <NavDropdown.Item>Profile</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n                                       <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\r\n                                       </NavDropdown>\r\n                                   </Nav>:\r\n                                   <Nav className=\"ml-auto\">\r\n                                   \r\n\r\n                                        <LinkContainer to='/login'>\r\n                                        <Nav.Link><i className=\"fas fa-user\"></i>  Login</Nav.Link>\r\n                                    </LinkContainer>\r\n                                    \r\n                                    <LinkContainer to='/register'>\r\n                                        <Nav.Link><i className=\"fas fa-user\"></i>  Register</Nav.Link>\r\n                                    </LinkContainer>\r\n                                        \r\n                                   \r\n\r\n                                       \r\n                                   </Nav>}\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n\r\n                         ","G:\\cavern\\frontend\\src\\components\\Footer.js",[],"G:\\cavern\\frontend\\src\\screens\\HomeScreen.js",["288","289"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport Product from '../components/Product'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport ProductCarousel from '../components/ProductCarousel'\r\nimport { listProducts } from '../actions/productActions'\r\nimport { login } from '../actions/userActions'\r\n\r\n\r\n\r\nfunction HomeScreen({ history }) {\r\n    const dispatch = useDispatch()\r\n    const productList = useSelector(state => state.productList)\r\n    const userLogin = useSelector(state=>state.userLogin)\r\n    const {userInfo} = userLogin\r\n    \r\n    const { error, loading, products, page, pages } = productList\r\n\r\n    let keyword = history.location.search\r\n\r\n    useEffect(() => {\r\n       if(!userInfo)\r\n       {\r\n            dispatch(login('','',''))\r\n       }\r\n        dispatch(listProducts(keyword))\r\n\r\n    }, [dispatch, keyword,userInfo])\r\n\r\n    return (\r\n        <div>\r\n            {!keyword && <ProductCarousel />}\r\n\r\n            {keyword==''?(<h1>Latest Products</h1>):(<h1>Search Results</h1>)}\r\n            {loading ? <Loader />\r\n                : error ? <Message variant='danger'>{error}</Message>\r\n                    :\r\n                    <div>\r\n                        <Row>\r\n                      \r\n                            {products.map(product => (                                \r\n                                <Col key={product.stockId.stockId} sm={12} md={6} lg={4} xl={3}>\r\n                                    <Product product={product} />\r\n                                </Col>\r\n                            ))}\r\n                        </Row>\r\n                        <Paginate page={page} pages={pages} keyword={keyword} />\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","G:\\cavern\\frontend\\src\\screens\\CartScreen.js",["290","291","292"],"import React, { useEffect,useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col, ListGroup, Image, Form, Button, Card } from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport { addToCart, removeFromCart,getCart } from '../actions/cartActions'\r\nimport Loader from '../components/Loader'\r\nimport { CART_UPDATE } from '../constants/cartConstants'\r\n\r\nfunction CartScreen({ match, location, history }) {\r\n    const stockId = match.params.id\r\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\r\n    const dispatch = useDispatch()\r\n    const userLogin = useSelector(state=>state.userLogin)\r\n    const {userInfo,loggingOut} = userLogin\r\n    const cart = useSelector(state => state.cart)\r\n    \r\n    const { cartItems,loading } = cart\r\n    const [fetch,setFetch] = useState(true)\r\n    useEffect(() => {\r\n        if(!userInfo)\r\n        {\r\n            history.push('/login')\r\n        }\r\n        else{\r\n        if (stockId) {\r\n            dispatch(addToCart(stockId, qty))\r\n            setFetch(false)\r\n           \r\n        }\r\n        else{\r\n            dispatch(getCart())\r\n        }\r\n    }\r\n    },\r\n      [dispatch, stockId, qty,userInfo,loggingOut]\r\n     )\r\n\r\n\r\n    const removeFromCartHandler = (id) => {\r\n        dispatch(removeFromCart(id))\r\n    }\r\n\r\n    const checkoutHandler = () => {\r\n        history.push('/login?redirect=shipping')\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={8}>\r\n                <h1>Shopping Cart</h1>\r\n                    {loading || loggingOut?<Loader/>:\r\n                cartItems? cartItems.length === 0 ? (\r\n                    <Message variant='info'>\r\n                        Your cart is empty <Link to='/'>Go Back</Link>\r\n                    </Message>\r\n                ) : (\r\n                        <ListGroup variant='flush'>\r\n                            {cartItems.map(item => (\r\n                                <ListGroup.Item key={item.stockId.stockId}>\r\n                                    <Row>\r\n                                        <Col md={2}>\r\n                                            <Image src={item.stockId.productId.image} alt={item.stockId.productId.name} fluid rounded />\r\n                                        </Col>\r\n                                        <Col md={3}>\r\n                                            <Link to={`/product/${item.stockId.stockId}`}>{item.stockId.productId.name}</Link>\r\n                                        </Col>\r\n\r\n                                        <Col md={2}>\r\n                                            &#8377;{item.stockId.price}\r\n                                        </Col>\r\n\r\n                                        <Col md={3}>\r\n                                            <Form.Control\r\n                                                as=\"select\"\r\n                                                value={item.quantity}\r\n                                                onChange={(e) => dispatch(addToCart(item.stockId.stockId, Number(e.target.value)))}\r\n                                            >\r\n                                                {\r\n\r\n                                                    [...Array(item.stockId.availableQuantity).keys()].map((x) => (\r\n                                                        <option key={x + 1} value={x + 1}>\r\n                                                            {x + 1}\r\n                                                        </option>\r\n                                                    ))\r\n                                                }\r\n\r\n                                            </Form.Control>\r\n                                        </Col>\r\n\r\n                                        <Col md={1}>\r\n                                            <Button\r\n                                                type='button'\r\n                                                variant='light'\r\n                                                onClick={() => removeFromCartHandler(item.stockId.stockId)}\r\n                                            >\r\n                                                <i className='fas fa-trash'></i>\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                            ))}\r\n                        </ListGroup>\r\n                    ):<Loader/>}\r\n            </Col>\r\n\r\n            <Col md={4}>\r\n               {cartItems&&!loading&&<Card>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Subtotal ({cartItems.reduce((acc, item) => acc + item.quantity, 0)}) items</h2>\r\n                            &#8377;{cartItems.reduce((acc, item) => acc + item.quantity * item.stockId.price, 0).toFixed(2)}\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n\r\n                    <ListGroup.Item>\r\n                        <Button\r\n                            type='button'\r\n                            className='btn-block'\r\n                            disabled={cartItems.length === 0}\r\n                            onClick={checkoutHandler}\r\n                        >\r\n                            Proceed To Checkout\r\n                        </Button>\r\n                    </ListGroup.Item>\r\n\r\n\r\n                </Card>}\r\n            </Col> \r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default CartScreen","G:\\cavern\\frontend\\src\\screens\\LoginScreen.js",[],"G:\\cavern\\frontend\\src\\screens\\ProductScreen.js",["293","294","295","296"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap'\r\nimport Rating from '../components/Rating'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listProductDetails, createProductReview } from '../actions/productActions'\r\nimport { PRODUCT_CREATE_REVIEW_RESET, PRODUCT_DETAILS_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductScreen({ match, history }) {\r\n    const [qty, setQty] = useState(1)\r\n    const [rating, setRating] = useState(0)\r\n    const [comment, setComment] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productDetails = useSelector(state => state.productDetails)\r\n    const { loading, error, product } = productDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const productReviewCreate = useSelector(state => state.productReviewCreate)\r\n    const {\r\n        loading: loadingProductReview,\r\n        error: errorProductReview,\r\n        success: successProductReview,\r\n    } = productReviewCreate\r\n\r\n    useEffect(() => {\r\n        // if(!userInfo)\r\n        // {\r\n        //     history.push('/login')\r\n        // }\r\n        dispatch({type:PRODUCT_DETAILS_RESET})\r\n        if (successProductReview) {\r\n            setRating(0)\r\n            setComment('')\r\n            dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\r\n        }\r\n\r\n        dispatch(listProductDetails(match.params.id))\r\n        console.log(product,match.params.id)\r\n    }, [dispatch, match.params.id, successProductReview])\r\n\r\n    const addToCartHandler = () => {\r\n        history.push(`/cart/${match.params.id}?qty=${qty}`)\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(createProductReview(\r\n            product.productId.productId, \r\n            rating,\r\n            comment,\r\n            userInfo.buyerId,\r\n        ))\r\n    }\r\n     function discountPercent(price,discount){\r\n        return (parseInt(price*100/(100-discount)))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to='/' className='btn btn-light my-3'>Go Back</Link>\r\n            {loading ?\r\n                <Loader />\r\n                : error\r\n                    ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                         <div>\r\n                        {product.productId?(\r\n                            <div>\r\n                             <Row>\r\n                                 <Col md={6}>\r\n                             \r\n                                    <Image src={product.productId.image} alt={product.productId.name} fluid />\r\n                                </Col>\r\n\r\n\r\n                                <Col md={3}>\r\n                                    <ListGroup variant=\"flush\">\r\n                                       \r\n                                        <ListGroup.Item>\r\n                                            <h3>{product.productId.name}</h3>\r\n                                        </ListGroup.Item>\r\n\r\n                                        <ListGroup.Item>\r\n                                            <Rating value={product.productId.rating} text={`${product.productId.votes} reviews`} color={'#f8e825'} />\r\n                                        </ListGroup.Item>\r\n\r\n                                        <ListGroup.Item>\r\n                                         \r\n                                      \r\n                                            Price:&#8377;{product.price}&nbsp;\r\n                                            \r\n                                           {product.offerId&& \r\n                                                    <del>{discountPercent(product.price,product.discountPercent)}</del>\r\n                                                    }\r\n                                         \r\n                                        </ListGroup.Item>\r\n\r\n                                        <ListGroup.Item>\r\n                                            Description: {product.productId.details}\r\n                                        </ListGroup.Item>\r\n                                                                                <ListGroup.Item>\r\n                                        Sold By: {product.sellerId.company}\r\n                                        </ListGroup.Item>\r\n                                    </ListGroup>\r\n                                </Col>\r\n\r\n\r\n                                <Col md={3}>\r\n                                    <Card>\r\n                                        <ListGroup variant='flush'>\r\n                                         {!userInfo&&<ListGroup.Item>\r\n                                            <Message variant='info'>Login to Add to cart</Message>\r\n                                        </ListGroup.Item>}\r\n                                            <ListGroup.Item>\r\n                                                <Row>\r\n                                                    <Col>Price:</Col>\r\n                                                    <Col>\r\n                                                        <strong> &#8377;{product.price}</strong>\r\n                                                    </Col>\r\n                                                   \r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n                                            <ListGroup.Item>\r\n                                                <Row>\r\n                                                    <Col>Status:</Col>\r\n                                                    <Col>\r\n                                                        {product.availableQuantity > 0 ? 'In Stock' : 'Out of Stock'}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n\r\n                                            {product.availableQuantity > 0 && (\r\n                                                <ListGroup.Item>\r\n                                                    <Row>\r\n                                                        <Col>Qty</Col>\r\n                                                        <Col xs='auto' className='my-1'>\r\n                                                            <Form.Control\r\n                                                                as=\"select\"\r\n                                                                value={qty}\r\n                                                                onChange={(e) => setQty(e.target.value)}\r\n                                                            >\r\n                                                                {\r\n\r\n                                                                    [...Array(product.availableQuantity).keys()].map((x) => (\r\n                                                                        <option key={x + 1} value={x + 1}>\r\n                                                                            {x + 1}\r\n                                                                        </option>\r\n                                                                    ))\r\n                                                                }\r\n\r\n                                                            </Form.Control>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </ListGroup.Item>\r\n                                            )}\r\n\r\n\r\n                                            {userInfo && userInfo.role=='buyer'&&<ListGroup.Item>\r\n                                                <Button\r\n                                                    onClick={addToCartHandler}\r\n                                                    className='btn-block'\r\n                                                    disabled={product.availableQuantity == 0||!userInfo}\r\n                                                    type='button'>\r\n                                                    Add to Cart\r\n                                                </Button>\r\n                                            </ListGroup.Item>}\r\n                                            \r\n                                              {!userInfo && <ListGroup.Item>\r\n                                                <Button\r\n                                                    onClick={addToCartHandler}\r\n                                                    className='btn-block'\r\n                                                    disabled={product.availableQuantity == 0||!userInfo}\r\n                                                    type='button'>\r\n                                                    Add to Cart\r\n                                                </Button>\r\n                                            </ListGroup.Item>}\r\n                                            \r\n                                        </ListGroup>\r\n                                    </Card>\r\n                                </Col>\r\n                           \r\n                            </Row> \r\n\r\n                            <Row>\r\n                                 <Col md={6}>\r\n                                    <h4>Reviews</h4>\r\n                                    {product.reviews.length === 0 && <Message variant='info'>No Reviews</Message>}\r\n\r\n                                    <ListGroup variant='flush'>\r\n                                        {product.reviews.map((review) => (\r\n                                            <ListGroup.Item key={review.ratingId}>\r\n                                                <strong>{review.buyerId.name}</strong> \r\n                                                <Rating value={review.rating} color='#f8e825' />\r\n                                                <p>{review.reviewedAt.substring(0, 10)}</p>\r\n                                                <p>{review.review}</p>\r\n                                            </ListGroup.Item>\r\n                                        ))}\r\n\r\n                                        <ListGroup.Item>\r\n                                            <h4>Write a review</h4>\r\n\r\n                                            {loadingProductReview && <Loader />}\r\n                                            {successProductReview && <Message variant='success'>Review Submitted</Message>}\r\n                                            {errorProductReview && <Message variant='danger'>{errorProductReview}</Message>}\r\n\r\n                                            {userInfo ? (\r\n                                                <Form onSubmit={submitHandler}>\r\n                                                    <Form.Group controlId='rating'>\r\n                                                        <Form.Label>Rating</Form.Label>\r\n                                                        <Form.Control\r\n                                                            as='select'\r\n                                                            value={rating}\r\n                                                            onChange={(e) => setRating(e.target.value)}\r\n                                                        >\r\n                                                            <option value=''>Select...</option>\r\n                                                            <option value='1'>1 - Poor</option>\r\n                                                            <option value='2'>2 - Fair</option>\r\n                                                            <option value='3'>3 - Good</option>\r\n                                                            <option value='4'>4 - Very Good</option>\r\n                                                            <option value='5'>5 - Excellent</option>\r\n                                                        </Form.Control>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group controlId='comment'>\r\n                                                        <Form.Label>Review</Form.Label>\r\n                                                        <Form.Control\r\n                                                            as='textarea'\r\n                                                            row='5'\r\n                                                            value={comment}\r\n                                                            onChange={(e) => setComment(e.target.value)}\r\n                                                        ></Form.Control>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Button\r\n                                                        disabled={loadingProductReview}\r\n                                                        type='submit'\r\n                                                        variant='primary'\r\n                                                    >\r\n                                                        Submit\r\n                                                    </Button>\r\n\r\n                                                </Form>\r\n                                            ) : (\r\n                                                    <Message variant='info'>Please <Link to='/login'>login</Link> to write a review</Message>\r\n                                                )}\r\n                                        </ListGroup.Item>\r\n                                    </ListGroup>\r\n                                </Col> \r\n                            </Row> \r\n                            </div> \r\n                        ):(\r\n                            <div><h1>Error occured</h1></div>\r\n                        )}\r\n                        </div> \r\n                    )\r\n\r\n            }\r\n\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default ProductScreen\r\n","G:\\cavern\\frontend\\src\\screens\\ProfileScreen.js",["297","298","299","300","301","302","303","304","305","306","307"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\nimport { listMyOrders } from '../actions/orderActions'\r\n\r\nfunction ProfileScreen({ history }) {\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [company,setCompany] = useState('')\r\n    const [address,setAddress] = useState('')\r\n    const [phone,setPhone] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { error, loading, user } = userDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n    const orderListMy = useSelector(state => state.orderListMy)\r\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n\r\n    useEffect(() => {\r\n       \r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        } else {\r\n            if (!user || !user.name || success ) {\r\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n                dispatch(getUserDetails(userInfo.role=='buyer'?userInfo.buyerId:userInfo.role=='seller'?userInfo.sellerId:userInfo.adminId))\r\n                if(userInfo.role=='buyer')\r\n                {\r\n                   dispatch(listMyOrders())\r\n                }\r\n               \r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n                setAddress(user.address)\r\n                setCompany(user.role=='seller'&&user.company)\r\n                setPhone(user.phone)\r\n            }\r\n        }\r\n    }, [dispatch, history, userInfo, user, success])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            dispatch(updateUserProfile({\r\n                'id': userInfo.role=='buyer'?user.buyerId:userInfo.role=='seller'?user.sellerId:user.adminId,\r\n                'name': name,\r\n                'email': email,\r\n                'password': password,\r\n                'address':address,\r\n                'company':company,\r\n                'phone':phone\r\n\r\n            }))\r\n             setPassword('')\r\n        setConfirmPassword('')\r\n            setMessage('')\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Row className='justify-content-center'>\r\n           {userInfo&& <Col md={userInfo.role=='buyer'?5:6}>\r\n                <h2>User Profile</h2>\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {loading && <Loader />}\r\n                <Form onSubmit={submitHandler}>\r\n\r\n                    <Form.Group controlId='name'>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='name'\r\n                            placeholder='Enter name'\r\n                            value={name}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='email'>\r\n                        <Form.Label>Email Address</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='email'\r\n                            placeholder='Enter Email'\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                     <Form.Group controlId='phone'>\r\n                        <Form.Label>Mobile no</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='text'\r\n                            placeholder='Enter Mobile no'\r\n                            value={phone}\r\n                            onChange={(e) => setPhone(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    {userInfo.role=='seller'&&\r\n                          <Form.Group controlId='company'>\r\n                        <Form.Label>Company</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='text'\r\n                            placeholder='Enter Company'\r\n                            value={company}\r\n                            onChange={(e) => setCompany(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    }\r\n                        <Form.Group controlId='address'>\r\n                        <Form.Label>Address</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            as=\"textarea\"\r\n                            placeholder='Enter Address'\r\n                            value={address}\r\n                            onChange={(e) => setAddress(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                        </Form.Group>\r\n                    <Form.Group controlId='password'>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n\r\n                            type='password'\r\n                            placeholder='Enter Password'\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='passwordConfirm'>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control\r\n\r\n                            type='password'\r\n                            placeholder='Confirm Password'\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Button type='submit' variant='primary'>\r\n                        Update\r\n                </Button>\r\n\r\n                </Form>\r\n            </Col>\r\n           }\r\n\r\n           {userInfo && userInfo.role=='buyer'&& <Col md={7}>\r\n                <h2>My Orders</h2>\r\n                {loadingOrders ? (\r\n                    <Loader />\r\n                ) : errorOrders ? (\r\n                    <Message variant='danger'>{errorOrders}</Message>\r\n                ) : (\r\n                            <Table striped responsive className='table-sm'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>ID</th>\r\n                                        <th>Date</th>\r\n                                        <th>Total</th>\r\n                                        {/* <th>Paid</th> */}\r\n                                        <th>Details</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {orders.map(order => (\r\n                                        <tr key={order.orderId}>\r\n                                            <td>{order.orderId}</td>\r\n                                            <td>{order.orderedAt.substring(0, 10)}</td>\r\n                                            <td>&#8377;{order.totalAmount}</td>\r\n                                            {/* <td>{order.paid=='Yes' ? order.paidAt.substring(0, 10) : (\r\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                                            )}</td> */}\r\n                                            <td>\r\n                                                <LinkContainer to={`/order/${order.orderId}`}>\r\n                                                    <Button className='btn-sm'>Details</Button>\r\n                                                </LinkContainer>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                        )}\r\n            </Col>}\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen","G:\\cavern\\frontend\\src\\screens\\ShippingScreen.js",["308"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\nimport Loader from '../components/Loader'\r\nfunction ShippingScreen({ history }) {\r\n\r\n    const shipping = useSelector(state => state.shipping)\r\n    const { shippingAddress,fetching } = shipping\r\n\r\n    const dispatch = useDispatch()\r\n    const [address, setAddress] = useState(shippingAddress)\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(saveShippingAddress(address))\r\n        history.push('/payment')\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 />\r\n            <h1>Shipping</h1>\r\n           {fetching?<Loader/>: <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='address'>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        as='textarea'\r\n                        type='text'\r\n                        placeholder='Enter address'\r\n                        value={address ? address : ''}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Continue\r\n                </Button>\r\n            </Form>}\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default ShippingScreen\r\n","G:\\cavern\\frontend\\src\\screens\\OrderScreen.js",["309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { getOrderDetails, payOrder, deliverOrder,cancelOrder,returnOrder } from '../actions/orderActions'\r\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET,ORDER_DETAILS_RESET } from '../constants/orderConstants'\r\n\r\nfunction OrderScreen({ match, history }) {\r\n    const orderId = match.params.id\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const [sdkReady, setSdkReady] = useState(false)\r\n\r\n    const orderDetails = useSelector(state => state.orderDetails)\r\n    const cancelorder = useSelector(state=>state.cancelOrder)\r\n    const returnorder = useSelector(state=>state.returnOrder)\r\n    const{getting,succeed,mistake} = returnorder\r\n    const {wrong,fetching,success}  = cancelorder\r\n    const { order, error, loading } = orderDetails\r\n\r\n    const orderPay = useSelector(state => state.orderPay)\r\n    const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n    const orderDeliver = useSelector(state => state.orderDeliver)\r\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo,loggingOut } = userLogin\r\n    const [receiving,setFetching] = useState(false)\r\n\r\n    if (!loading && !error) {\r\n        order.itemsPrice = order.items.reduce((acc, item) => acc + item.amount * item.quantity, 0).toFixed(2)\r\n    }\r\n\r\n\r\n    const addPayPalScript = () => {\r\n        const script = document.createElement('script')\r\n        script.type = 'text/javascript'\r\n        script.src = 'https://www.paypal.com/sdk/js?client-id=AeDXja18CkwFUkL-HQPySbzZsiTrN52cG13mf9Yz7KiV2vNnGfTDP0wDEN9sGlhZHrbb_USawcJzVDgn'\r\n        script.async = true\r\n        script.onload = () => {\r\n            setSdkReady(true)\r\n        }\r\n        document.body.appendChild(script)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        }\r\n\r\n        // if (!order  || order.orderId !== Number(orderId)) {\r\n           dispatch({type:ORDER_DETAILS_RESET})\r\n            dispatch(getOrderDetails(orderId))\r\n        \r\n        // }\r\n    }, [dispatch,userInfo,receiving,cancelorder,returnorder])\r\n\r\n\r\n    const successPaymentHandler = (paymentResult) => {\r\n        dispatch(payOrder(orderId, paymentResult))\r\n    }\r\n\r\n    const deliverHandler = () => {\r\n        dispatch(deliverOrder(order))\r\n    }\r\n    const cancelOrderHandler = (orderedItemId,orderId)=> {\r\n         setFetching(true)\r\n        dispatch(cancelOrder(orderedItemId,orderId))\r\n        dispatch({type:ORDER_DETAILS_RESET})\r\n        dispatch(getOrderDetails(orderId))\r\n        setFetching(false)\r\n    }\r\n    const returnOrderHandler = (orderedItemId,orderId)=>{\r\n        dispatch(returnOrder(orderedItemId,orderId))\r\n        dispatch(getOrderDetails(orderId))\r\n    }\r\n    return loading||fetching||getting||receiving || loggingOut ? (\r\n        <Loader />\r\n    ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n    ) : (\r\n                <div>\r\n                    <h1>OrderId: {order.orderId}</h1>\r\n                    <Row>\r\n                        <Col md={9}>\r\n                            <ListGroup variant='flush'>\r\n                                <ListGroup.Item>\r\n                                    <h2>Shipping</h2>\r\n                                    <p><strong>Name: </strong> {order.buyerId.name}</p>\r\n                                    <p><strong>Email: </strong><a href={`mailto:${order.buyerId.email}`}>{order.buyerId.email}</a></p>\r\n                                    <p>\r\n                                        <strong>Shipping: </strong>\r\n                                        {order.address}\r\n                                    </p>\r\n\r\n                                    {/* {order.status=='Delivered' ? (\r\n                                        <Message variant='success'>Delivered on {order.deliveredAt}</Message>\r\n                                    ) : (\r\n                                            <Message variant='warning'>Not Delivered</Message>\r\n                                        )} */}\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <h2>Payment Method</h2>\r\n                                    <p>\r\n                                        <strong>Method: </strong>\r\n                                        {order.paymentMethod}\r\n                                    </p>\r\n                                    {/* {order.paid=='Yes' ? (\r\n                                        <Message variant='success'>Paid on {order.paidAt}</Message>\r\n                                    ) : (\r\n                                            <Message variant='warning'>Not Paid</Message>\r\n                                        )} */}\r\n\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <h2>Order Items</h2>\r\n                                    {order.items.length === 0 ? <Message variant='info'>\r\n                                        Order is empty\r\n                            </Message> : (\r\n                                            <ListGroup variant='flush'>\r\n                                                {order.items.map(item => (\r\n                                                    <ListGroup.Item key={item.orderedItemId}>\r\n                                                        <Row>\r\n                                                            <Col md={1}>\r\n                                                                <Image src={item.stockId.productId.image} alt={item.stockId.productId.name} fluid rounded />\r\n                                                            </Col>\r\n\r\n                                                            <Col>\r\n                                                                <Link to={`/product/${item.stockId.stockId}`}>{item.stockId.productId.name}</Link>\r\n                                                            </Col>\r\n\r\n                                                            <Col md={3}>\r\n                                                                {item.quantity} X &#8377;{item.amount} = &#8377;{(item.quantity * item.amount).toFixed(2)}\r\n                                                            </Col>\r\n                                                            <Col>\r\n                                                                {item.status}\r\n                                                            </Col>\r\n                                                            <Col>\r\n                                                                 {item.status=='Delivered'? (<Button\r\n                                                                    type='button'\r\n                                                              className='btn-block' onClick={()=>returnOrderHandler(item.orderedItemId,order.orderId)} >\r\n                                                                       Return Order\r\n                                                                        </Button>):item.status!='Cancelled'&&item.status!='In Return'&&item.status!='Returned'&&\r\n                                                                       ( <Button\r\n                                                                           type='button'\r\n                                                                         className='btn-block'onClick={()=>cancelOrderHandler(item.orderedItemId,order.orderId)} >\r\n                                                                            Cancel Order\r\n                                                                        </Button>)}\r\n\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </ListGroup.Item>\r\n                                                ))}\r\n                                            </ListGroup>\r\n                                        )}\r\n                                </ListGroup.Item>\r\n\r\n                            </ListGroup>\r\n\r\n                        </Col>\r\n\r\n                        <Col md={3}>\r\n                            <Card>\r\n                                <ListGroup variant='flush'>\r\n                                    <ListGroup.Item>\r\n                                        <h2>Order Summary</h2>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Items:</Col>\r\n                                            <Col>&#8377;{order.totalAmount}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Shipping:</Col>\r\n                                            <Col>&#8377;{0}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    {/* <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Tax:</Col>\r\n                                            <Col>${o}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item> */}\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Total:</Col>\r\n                                            <Col>&#8377;{order.totalAmount}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n\r\n{/*                                 \r\n                                    {order.paymentMethod=='Cash on Delivery'&&\r\n                                    ( <ListGroup.Item>\r\n                           <Button\r\n                            type='button'\r\n                            className='btn-block' >\r\n                        Cancel Order\r\n                        </Button>\r\n                    </ListGroup.Item>)} */}\r\n                                </ListGroup>\r\n\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n}\r\n\r\nexport default OrderScreen\r\n","G:\\cavern\\frontend\\src\\screens\\PlaceOrderScreen.js",["329","330"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { createOrder } from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\nimport { getCart, getPaymentMethod, getShippingAddress } from '../actions/cartActions'\r\nimport Loader from '../components/Loader'\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const { order, error, success } = orderCreate\r\n\r\n    const dispatch = useDispatch()\r\n    const userLogin = useSelector(state=>state.userLogin)\r\n    const{userInfo} = userLogin\r\n    const cart = useSelector(state => state.cart)\r\n    const shipping = useSelector(state=>state.shipping)\r\n    const payment = useSelector(state=>state.payment)\r\n    const {fetching,shippingAddress} = shipping\r\n    const [receiving,setReceiving] =useState(false)\r\n    const {getting,paymentMethod}  = payment\r\n    const {loading,cartItems} =cart\r\n    console.log(cartItems)\r\n    var itemsPrice = cartItems.reduce((acc, item) => acc + item.stockId.price * item.quantity, 0).toFixed(2)\r\n    var shippingPrice = (itemsPrice > 100 ? 0 : 10).toFixed(2)\r\n    // var taxPrice = Number((0.082) * itemsPrice).toFixed(2)\r\n    var totalPrice = (Number(itemsPrice))\r\n    // + Number(shippingPrice) + Number(taxPrice)).toFixed(2)\r\n\r\n\r\n   \r\n\r\n    useEffect(() => {\r\n        if(!userInfo)\r\n        {\r\n            history.push('/login')\r\n        }\r\n         if (!paymentMethod) {\r\n        history.push('/payment')\r\n    }\r\n        setReceiving(true)\r\n       dispatch(getCart())\r\n       dispatch(getShippingAddress())\r\n       dispatch(getPaymentMethod())\r\n        setReceiving(false)\r\n        console.log(cartItems)\r\n        if (success) {\r\n            history.push(`/order/${order.orderId}`)\r\n            dispatch({ type: ORDER_CREATE_RESET })\r\n        }\r\n    }, [dispatch,success, history,receiving,userInfo])\r\n\r\n    const placeOrder = () => {\r\n       \r\n        dispatch(createOrder({\r\n            cartItems: cartItems,\r\n            shippingAddress: shippingAddress,\r\n            paymentMethod: paymentMethod,\r\n           itemsPrice: itemsPrice,\r\n           totalPrice: totalPrice,\r\n       }))\r\n       setReceiving(false)\r\n    }\r\n    return (\r\n        <div>\r\n            <CheckoutSteps step1 step2 step3 step4 />\r\n            {!cartItems||loading||fetching||getting||receiving?<Loader/>: <Row>\r\n                 <Col md={8}>\r\n                     <ListGroup variant='flush'>\r\n                         <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n\r\n                            <p>\r\n                                <strong>Shipping: </strong>\r\n                                   {shippingAddress} \r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {paymentMethod}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                             {cartItems?cartItems.length === 0 ? <Message variant='info'>\r\n                                Your cart is empty\r\n                            </Message> : (\r\n                                    <ListGroup variant='flush'>\r\n                                        {cartItems.map(item => (\r\n                                         <ListGroup.Item key={item.stockId.stockId}>\r\n                                                <Row>\r\n                                                    <Col md={1}>\r\n                                                        <Image src={item.stockId.productId.image} alt={item.stockId.productId.name} fluid rounded />\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Link to={`/product/${item.stockId.stockId}`}>{item.stockId.productId.name}</Link>\r\n                                                    </Col>\r\n\r\n                                                    <Col md={4}>\r\n                                                        {item.quantity} X &#8377;{item.stockId.price} = &#8377;{(item.quantity * item.stockId.price).toFixed(2)}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item> \r\n                                        ))}\r\n                                    </ListGroup>\r\n                                ):<Loader/>} \r\n                        </ListGroup.Item>  \r\n\r\n                    </ListGroup> \r\n\r\n                </Col> \r\n\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Items:</Col>\r\n                                    <Col>&#8377;{itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping:</Col>\r\n                                    <Col>&#8377;{shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            {/* <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Tax:</Col>\r\n                                    <Col>&#8377;{taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item> */}\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total:</Col>\r\n                                    <Col>&#8377;{totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n\r\n                           {error&& <ListGroup.Item>\r\n                                 <Message variant='danger'>{error}</Message>\r\n                            </ListGroup.Item>}\r\n\r\n                            <ListGroup.Item>\r\n                                <Button\r\n                                    type='button'\r\n                                    className='btn-block'\r\n                                    disabled={cartItems === 0}\r\n                                    onClick={placeOrder}\r\n                                    disabled={receiving}\r\n                                >\r\n                                    Place Order\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","G:\\cavern\\frontend\\src\\screens\\RegisterScreen.js",["331","332","333"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col,Nav,Tabs,Tab,Sonnet } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { register } from '../actions/userActions'\r\n\r\nfunction RegisterScreen({ location, history }) {\r\n\r\n   \r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [phone,setPhone] = useState('')\r\n    const [address,setAddress] = useState('')\r\n    const [role,setRole] = useState('buyer')\r\n    const [company,setCompany] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    const userRegister = useSelector(state => state.userRegister)\r\n    const { error, loading, userInfo } = userRegister\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            dispatch(register(name,email,phone,address, password,role,company))\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Sign In</h1>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n                 <Tabs defaultActiveKey=\"home\" transition={false} id=\"noanim-tab-example\">\r\n  <Tab eventKey=\"home\" title=\"Buyer\" onSelect={()=>setRole('buyer')}>\r\n    <Form onSubmit={submitHandler}>\r\n    <div style={{'padding':'20px'}}></div>\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='name'\r\n                        placeholder='Enter Name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n               \r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='email'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                 <Form.Group controlId='mobile'>\r\n                    <Form.Label>Mobile No</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter Mobile no'\r\n                        value={phone}\r\n                        onChange={(e) => setPhone(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                 <Form.Group controlId='address'>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter Address'\r\n                        value={address}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='passwordConfirm'>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n              \r\n                <Button type='submit' variant='primary'>\r\n                    Register\r\n                </Button>\r\n\r\n            </Form>\r\n\r\n  </Tab>\r\n  <Tab eventKey=\"profile\" title=\"Seller\" onSelect={()=>setRole('seller')}>\r\n   <Form onSubmit={submitHandler}>\r\n    <div style={{'padding':'20px'}}></div>\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='name'\r\n                        placeholder='Enter Name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n               \r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='email'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                 <Form.Group controlId='mobile'>\r\n                    <Form.Label>Mobile No</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter Mobile no'\r\n                        value={phone}\r\n                        onChange={(e) => setPhone(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                 <Form.Group controlId='company'>\r\n                    <Form.Label>Company</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter Company'\r\n                        value={company}\r\n                        onChange={(e) => setCompany(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                 <Form.Group controlId='address'>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter Address'\r\n                        value={address}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='passwordConfirm'>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n              \r\n                <Button type='submit' variant='primary'>\r\n                    Register\r\n                </Button>\r\n\r\n            </Form>\r\n  </Tab>\r\n \r\n</Tabs>\r\n\r\n           \r\n            <Row className='py-3'>\r\n                <Col>\r\n                    Have an Account? <Link\r\n                        to={redirect ? `/login?redirect=${redirect}` : '/login'}>\r\n                        Sign In\r\n                        </Link>\r\n                </Col>\r\n            </Row>\r\n        </FormContainer >\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","G:\\cavern\\frontend\\src\\screens\\PaymentScreen.js",["334","335"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { savePaymentMethod } from '../actions/cartActions'\r\nimport Loader from '../components/Loader'\r\n\r\nfunction PaymentScreen({ history }) {\r\n\r\n    const payment = useSelector(state => state.payment)\r\n    const shipping = useSelector(state=>state.shipping)\r\n    const {shippingAddress} = shipping\r\n    const { paymentMethod,getting } = payment\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [paymentmethod, setPaymentMethod] = useState('Cash on Delivery')\r\n\r\n    if (!shippingAddress) {\r\n        history.push('/shipping')\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(savePaymentMethod(paymentmethod))\r\n        history.push('/placeorder')\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 step3 />\r\n\r\n           {getting?<Loader/>: <Form onSubmit={submitHandler}>\r\n                <Form.Group>\r\n                    <Form.Label as='legend'>Select Method</Form.Label>\r\n                    <Col>\r\n\r\n                      \r\n                         <Form.Check\r\n                            type='radio'\r\n                            label='Cash on Delivery'\r\n                            id='cod'\r\n                            name='paymentMethod'\r\n                            value=\"Cash on Delivery\"\r\n                            onChange={(e) => setPaymentMethod(e.target.value)}\r\n                            checked\r\n                        >\r\n\r\n                        </Form.Check>\r\n                    </Col>\r\n                </Form.Group>\r\n                \r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Continue\r\n                </Button>\r\n            </Form>}\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default PaymentScreen\r\n","G:\\cavern\\frontend\\src\\screens\\OrderListScreen.js",["336","337"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listOrders } from '../actions/orderActions'\r\n\r\nfunction OrderListScreen({ history }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const orderList = useSelector(state => state.orderList)\r\n    const { loading, error, orders } = orderList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo,loggingOut } = userLogin\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.role=='admin') {\r\n            dispatch(listOrders())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n\r\n    }, [dispatch, history, userInfo])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Orders</h1>\r\n            {loading||loggingOut\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>USER</th>\r\n                                    <th>DATE</th>\r\n                                    <th>Total</th>\r\n                                    <th>PAID</th>\r\n                                    <th>DELIVERED</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {orders.map(order => (\r\n                                    <tr key={order.orderId}>\r\n                                        <td>{order.orderId}</td>\r\n                                        <td>{order.buyerId.name}</td>\r\n                                        <td>{order.orderedAt.substring(0, 10)}</td>\r\n                                        <td>${order.totalAmount}</td>\r\n\r\n                                        {/* <td>{order.paid=='Yes' ? (\r\n                                            order.paidAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td> */}\r\n\r\n                                        {/* <td>{order.status=='delivered' ? (\r\n                                            order.deliveredAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td> */}\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/order/${order.orderId}`}>\r\n                                                <Button variant='light' className='btn-sm'>\r\n                                                    Details\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderListScreen","G:\\cavern\\frontend\\src\\components\\SearchBox.js",[],"G:\\cavern\\frontend\\src\\components\\Product.js",[],"G:\\cavern\\frontend\\src\\components\\Paginate.js",[],"G:\\cavern\\frontend\\src\\components\\FormContainer.js",[],"G:\\cavern\\frontend\\src\\components\\ProductCarousel.js",[],"G:\\cavern\\frontend\\src\\components\\Loader.js",[],"G:\\cavern\\frontend\\src\\components\\Message.js",[],"G:\\cavern\\frontend\\src\\components\\CheckoutSteps.js",[],"G:\\cavern\\frontend\\src\\components\\Rating.js",[],"G:\\cavern\\frontend\\src\\constants\\cartConstants.js",[],"G:\\cavern\\frontend\\src\\constants\\userConstants.js",[],"G:\\cavern\\frontend\\src\\constants\\orderConstants.js",[],"G:\\cavern\\frontend\\src\\constants\\productConstants.js",[],"G:\\cavern\\frontend\\src\\actions\\cartActions.js",["338"],"import axios from 'axios'\r\nimport {\r\n    CART_ADD_ITEM,\r\n    CART_REMOVE_ITEM,\r\n    CART_GET_REQUEST,\r\n    CART_SAVE_SHIPPING_ADDRESS,\r\n    CART_ADD_REQUEST,\r\n    CART_SAVE_PAYMENT_METHOD,\r\n    CART_GET_PAYMENT_METHOD,\r\n    CART_UPDATE,\r\n    CART_REMOVE_REQUEST,\r\n    CART_REMOVE_SUCCESS,\r\n    CART_UPDATE_SUCCESS,\r\n    CART_GET_SHIPPING_ADDRESS\r\n} from '../constants/cartConstants'\r\n\r\n\r\nexport const addToCart = (id, qty) => async (dispatch, getState) => {\r\n\r\n    dispatch({\r\n        type:CART_ADD_REQUEST\r\n    })\r\n     const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n    const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n    const { data } = await axios.put(`/api/cart/product/${id}`,\r\n         {'buyerId':userInfo.buyerId,'quantity':qty},\r\n        config\r\n    )\r\n    dispatch({\r\n        type: CART_ADD_ITEM,\r\n        payload: data\r\n    })\r\n    const information = await axios.get(`api/mycart/${userInfo.buyerId}`)\r\n    console.log(information)\r\n    dispatch({\r\n        type:CART_UPDATE,\r\n        payload:information.data\r\n    })\r\n    dispatch({\r\n        type:CART_UPDATE_SUCCESS\r\n    })\r\n    // localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\r\n}\r\n\r\nexport const getCart = () => async (dispatch, getState) => {\r\n\r\n    dispatch({\r\n        type:CART_GET_REQUEST\r\n    })\r\n     const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n    const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n  \r\n   \r\n    const information = await axios.get(`api/mycart/${userInfo.buyerId}`)\r\n    console.log(information)\r\n    dispatch({\r\n        type:CART_UPDATE,\r\n        payload:information.data\r\n    })\r\n    dispatch({\r\n        type:CART_UPDATE_SUCCESS\r\n    })\r\n    // localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\r\n}\r\n\r\nexport const removeFromCart = (id) => async (dispatch, getState) => {\r\n    dispatch({\r\n        type:CART_REMOVE_REQUEST\r\n    })\r\n    await axios.delete(`/api/cart/delete/${id}`)\r\n    dispatch({\r\n        type: CART_REMOVE_ITEM,\r\n        payload: id,\r\n    })\r\n    dispatch({\r\n        type:CART_REMOVE_SUCCESS\r\n    })\r\n}\r\n\r\n\r\nexport const saveShippingAddress = (data) => (dispatch) => {\r\n    dispatch({\r\n        type: CART_SAVE_SHIPPING_ADDRESS,\r\n        payload: data,\r\n    })\r\n    dispatch({\r\n        type:CART_GET_SHIPPING_ADDRESS\r\n    })\r\n\r\n}\r\n\r\nexport const getShippingAddress = () => (dispatch) => {\r\n   \r\n    dispatch({\r\n        type:CART_GET_SHIPPING_ADDRESS\r\n    })\r\n\r\n}\r\n\r\nexport const savePaymentMethod = (data) => (dispatch) => {\r\n    dispatch({\r\n        type: CART_SAVE_PAYMENT_METHOD,\r\n        payload: data,\r\n    })\r\n    dispatch({\r\n        type:CART_GET_PAYMENT_METHOD\r\n    })\r\n\r\n}\r\nexport const getPaymentMethod = () => (dispatch) => {\r\n    dispatch({\r\n        type:CART_GET_PAYMENT_METHOD\r\n    })\r\n}","G:\\cavern\\frontend\\src\\actions\\orderActions.js",["339","340","341","342","343"],"import axios from 'axios'\r\nimport {\r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL,\r\n\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_RESET,\r\n\r\n    ORDER_LIST_MY_REQUEST,\r\n    ORDER_LIST_MY_SUCCESS,\r\n    ORDER_LIST_MY_FAIL,\r\n    ORDER_LIST_MY_RESET,\r\n\r\n    ORDER_LIST_REQUEST,\r\n    ORDER_LIST_SUCCESS,\r\n    ORDER_LIST_FAIL,\r\n\r\n    ORDER_DELIVER_REQUEST,\r\n    ORDER_DELIVER_SUCCESS,\r\n    ORDER_DELIVER_FAIL,\r\n    ORDER_DELIVER_RESET,\r\n    ORDER_CANCEL_REQUEST,\r\n    ORDER_CANCEL_SUCCESS,\r\n    ORDER_CANCEL_FAIL,\r\n\r\n    ORDER_RETURN_REQUEST,\r\n    ORDER_RETURN_SUCCESS,\r\n    ORDER_RETURN_FAIL,\r\n} from '../constants/orderConstants'\r\n\r\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\r\n\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n               // Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/orders/add/`,\r\n           { 'order':order,'buyerId':userInfo.buyerId},\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_CREATE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: CART_CLEAR_ITEMS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.removeItem('cartItems')\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/order/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_PAY_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/orders/${id}/pay/`,\r\n            paymentResult,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_PAY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_PAY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deliverOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DELIVER_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/orders/${order._id}/deliver/`,\r\n            {},\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_DELIVER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_DELIVER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const listMyOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_MY_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                // Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/myorders/${userInfo.buyerId}`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_MY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_LIST_MY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const cancelOrder =(id,orderId)=>async(dispatch,getState) =>{\r\n     try {\r\n        dispatch({\r\n            type: ORDER_CANCEL_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                // Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        await axios.post(\r\n            `/api/cancel/`,\r\n            {'orderedItemId':id,'orderId':orderId},\r\n            config\r\n        )\r\n        dispatch({\r\n            type: ORDER_CANCEL_SUCCESS,\r\n            payload: true\r\n        })\r\n        //  const { data } = await axios.get(\r\n        //     `/api/order/${orderId}/`,\r\n        //     config\r\n        // )\r\n\r\n        // dispatch({\r\n        //     type: ORDER_DETAILS_SUCCESS,\r\n        //     payload: data\r\n        // })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_CANCEL_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const returnOrder =(id,orderId)=>async(dispatch,getState) =>{\r\n     try {\r\n        dispatch({\r\n            type: ORDER_RETURN_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                // Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        await axios.post(\r\n            `/api/return/`,\r\n            {'orderedItemId':id,'orderId':orderId},\r\n            config\r\n        )\r\n        dispatch({\r\n            type: ORDER_RETURN_SUCCESS,\r\n            payload: true\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_RETURN_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}","G:\\cavern\\frontend\\src\\actions\\userActions.js",["344","345","346","347","348","349","350","351","352","353","354","355","356","357"],"import axios from 'axios'\r\nimport {\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n\r\n    USER_LOGOUT,\r\n    USER_LOGOUT_REQUEST,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_RESET,\r\n\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n\r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n\r\n} from '../constants/userConstants'\r\n\r\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\r\n\r\nimport { VERIFIED_SELLERS_RESET,\r\n    UNVERIFIED_SELLERS_RESET,\r\n    ADMINS_LIST_RESET,\r\n    RETURN_PRODUCTS_RESET,\r\n    DELIVER_PRODUCTS_RESET\r\n   } from '../constants/adminConstants'\r\n\r\nexport const login = (email, password,role) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/login/',\r\n            { 'email': email, 'password': password,'role':role},\r\n            config\r\n        )\r\n        console.log(data)\r\n        if (data.role)\r\n        {\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n          localStorage.setItem('userInfo', JSON.stringify(data))\r\n        }\r\n        else {\r\n            dispatch({\r\n                type:USER_LOGOUT_REQUEST\r\n            })\r\n            dispatch({\r\n                type:USER_LOGOUT\r\n            })\r\n        }\r\n\r\n       \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const logout = () => async (dispatch) => {\r\n    localStorage.removeItem('userInfo')\r\n    await axios.post(`/api/logout`)\r\n    dispatch({ type: USER_LOGOUT })\r\n    dispatch({ type: USER_DETAILS_RESET })\r\n    dispatch({ type: ORDER_LIST_MY_RESET })\r\n    dispatch({ type: USER_LIST_RESET })\r\n    dispatch({ type: VERIFIED_SELLERS_RESET })\r\n    dispatch({ type: UNVERIFIED_SELLERS_RESET }) \r\n    dispatch({ type: ADMINS_LIST_RESET})\r\n    dispatch({ type: RETURN_PRODUCTS_RESET})\r\n    dispatch({ type: DELIVER_PRODUCTS_RESET})\r\n\r\n}\r\n\r\n\r\nexport const register = (name,email,phone,address, password,role,company) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/register/',\r\n            { 'email': email, 'password': password ,'name':name,'address':address,'phone':phone,'role':role,'company':company },\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                 Authorization: `Bearer ${userInfo.role=='buyer'?userInfo.buyerId:userInfo.role=='seller'?userInfo.sellerId:userInfo.adminId}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/${id}/${userInfo.role}`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_DETAILS_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.role=='buyer'?userInfo.buyerId:userInfo.role=='seller'?userInfo.sellerId:userInfo.adminId}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/profile/update/`,\r\n            {'user':user,'role':userInfo.role},\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","G:\\cavern\\frontend\\src\\actions\\productActions.js",["358","359","360","361","362","363","364","365"],"import axios from 'axios'\r\nimport {\r\n    PRODUCT_LIST_REQUEST,\r\n    PRODUCT_LIST_SUCCESS,\r\n    PRODUCT_LIST_FAIL,\r\n\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAIL,\r\n\r\n    PRODUCT_DELETE_REQUEST,\r\n    PRODUCT_DELETE_SUCCESS,\r\n    PRODUCT_DELETE_FAIL,\r\n\r\n    PRODUCT_CREATE_REQUEST,\r\n    PRODUCT_CREATE_SUCCESS,\r\n    PRODUCT_CREATE_FAIL,\r\n\r\n    PRODUCT_UPDATE_REQUEST,\r\n    PRODUCT_UPDATE_SUCCESS,\r\n    PRODUCT_UPDATE_FAIL,\r\n\r\n    PRODUCT_CREATE_REVIEW_REQUEST,\r\n    PRODUCT_CREATE_REVIEW_SUCCESS,\r\n    PRODUCT_CREATE_REVIEW_FAIL,\r\n\r\n\r\n    PRODUCT_TOP_REQUEST,\r\n    PRODUCT_TOP_SUCCESS,\r\n    PRODUCT_TOP_FAIL,\r\n\r\n} from '../constants/productConstants'\r\n\r\n\r\nexport const listProducts = (keyword = '') => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_LIST_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/products${keyword}`)\r\n        console.log(data)\r\n\r\n        dispatch({\r\n            type: PRODUCT_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listTopProducts = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_TOP_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/products/top/`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_TOP_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_TOP_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listProductDetails = (id) => async (dispatch) => {\r\n    try {\r\n        console.log(id)\r\n        dispatch({ type: PRODUCT_DETAILS_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/product/${id}`)\r\n        console.log(data)\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const updateProduct = (product) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/products/update/${product._id}/`,\r\n            product,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const createProductReview = (productId, rating,review,userId) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                 Authorization: `Bearer ${userInfo.role=='buyer'?userInfo.buyerId:userInfo.role=='seller'?userInfo.sellerId:userInfo.adminId}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/products/${productId}/reviews/`,\r\n            {'review':review,'rating':rating,'userId':userId},\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}","G:\\cavern\\frontend\\src\\screens\\VerifiedSellers.js",["366","367","368","369","370","371","372","373"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button,Table, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { verifiedSeller } from '../actions/adminActions'\r\nimport { removeSeller } from '../actions/adminActions'\r\nimport HomeScreen from './HomeScreen'\r\n\r\n\r\nfunction VerifiedSellers ({history}){\r\n    const dispatch = useDispatch()\r\n    const data = useSelector(state => state.verifiedSellers)\r\n    const userLogin = useSelector(state=>state.userLogin)\r\n    const {userInfo} = userLogin\r\n     const {error,loading, verifiedSellers} = data\r\n    useEffect(() => {\r\n        if(!userInfo)\r\n        {\r\n            history.push('/')\r\n        }\r\n        dispatch(verifiedSeller())\r\n    },[dispatch,userInfo])\r\n    console.log(verifiedSellers)\r\n    return (\r\n        <div>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    :verifiedSellers\r\n                       ? (<div>\r\n                        <h1>Verified Sellers</h1>\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Email</th>\r\n                                    <th>Company</th>\r\n                                    <th>Remove</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                             <tbody>\r\n                                {verifiedSellers.map(data => (\r\n                                    <tr key={data.sellerId}>\r\n                                         <td>{data.name}</td>\r\n                                        <td>{data.email}</td>\r\n                                        <td>{data.company}</td>\r\n                                        <td>\r\n                                            <Button  onClick={()=>dispatch(removeSeller(data.sellerId))} >Remove</Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody> \r\n                        </Table>\r\n                        </div>\r\n                    )\r\n                       :<div>\r\n                          <h1>HOME</h1>\r\n                       </div>\r\n                    }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VerifiedSellers","G:\\cavern\\frontend\\src\\screens\\UnverifiedSellers.js",["374","375","376","377","378","379","380","381"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button,Table, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { unverifiedSeller } from '../actions/adminActions'\r\nimport { verifySeller } from '../actions/adminActions'\r\nimport HomeScreen from './HomeScreen'\r\n\r\nfunction UnverifiedSellers ({history}){\r\n    const dispatch = useDispatch()\r\n    const data = useSelector(state => state.unverifiedSellers)\r\n    const userLogin = useSelector(state=>state.userLogin)\r\n    const {userInfo} = userLogin\r\n    const {error,loading,unverifiedSellers} = data\r\n\r\n    useEffect(() => {\r\n        if(!userInfo)\r\n        {\r\n            history.push('/')\r\n        }\r\n        dispatch(unverifiedSeller())\r\n    },[dispatch,userInfo])\r\n    console.log(unverifiedSellers)\r\n    return (\r\n        <div>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    :unverifiedSellers\r\n                       ? (\r\n                           <div>\r\n                               <h1>Unverified Sellers</h1>\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th> Name</th>\r\n                                    <th>Email</th>\r\n                                    <th>Company</th>\r\n                                    <th>Verify</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                             <tbody>\r\n                                {unverifiedSellers.map(data => (\r\n                                    <tr key={data.sellerId}>\r\n                                        <td>{data.name}</td>\r\n                                        <td>{data.email}</td>\r\n                                        <td>{data.company}</td>\r\n                                        <td>\r\n                                            <Button  onClick={()=>dispatch(verifySeller(data.sellerId))} >Approve</Button>\r\n                                        </td>\r\n                                     </tr>\r\n                                ))}\r\n                            </tbody> \r\n                        </Table>\r\n                        </div>\r\n                    )\r\n                      :\r\n                      <div>\r\n                           <h1>Home</h1>\r\n                       </div>\r\n                    }\r\n                    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UnverifiedSellers","G:\\cavern\\frontend\\src\\reducers\\adminReducers.js",[],"G:\\cavern\\frontend\\src\\constants\\adminConstants.js",[],"G:\\cavern\\frontend\\src\\actions\\adminActions.js",["382","383"],"import axios from 'axios'\r\nimport {\r\n    VERIFIED_SELLERS_REQUEST,\r\n    VERIFIED_SELLERS_SUCCESS,\r\n    VERIFIED_SELLERS_FAIL,\r\n    UNVERIFIED_SELLERS_REQUEST,\r\n    UNVERIFIED_SELLERS_SUCCESS,\r\n    UNVERIFIED_SELLERS_FAIL,\r\n    ADMINS_LIST_SUCCESS,\r\n    ADMINS_LIST_REQUEST,\r\n    ADMINS_LIST_FAIL,\r\n    RETURN_PRODUCTS_SUCCESS,\r\n    RETURN_PRODUCTS_REQUEST,\r\n    RETURN_PRODUCTS_FAIL,\r\n    RETURN_PRODUCTS_RESET,\r\n    DELIVER_PRODUCTS_SUCCESS,\r\n    DELIVER_PRODUCTS_REQUEST,\r\n    DELIVER_PRODUCTS_FAIL,\r\n    DELIVER_PRODUCTS_RESET\r\n    \r\n} from '../constants/adminConstants'\r\n\r\nexport const verifiedSeller = () => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: VERIFIED_SELLERS_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            '/api/verifiedsellers/',\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: VERIFIED_SELLERS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: VERIFIED_SELLERS_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const unverifiedSeller = () => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: UNVERIFIED_SELLERS_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n      \r\n        const { data } = await axios.get(\r\n            '/api/unverifiedsellers/',\r\n            config\r\n        )\r\n       \r\n        dispatch({\r\n            type: UNVERIFIED_SELLERS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n      \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: UNVERIFIED_SELLERS_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const verifySeller = (sid) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: UNVERIFIED_SELLERS_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n      \r\n        const { data } = await axios.get(\r\n            `/api/verifyseller/${sid}/`,\r\n            config\r\n        )\r\n       \r\n        dispatch({\r\n            type: UNVERIFIED_SELLERS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n     \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: UNVERIFIED_SELLERS_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const removeSeller = (sid) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: VERIFIED_SELLERS_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/removeseller/${sid}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: VERIFIED_SELLERS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n      \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: VERIFIED_SELLERS_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const adminlist = () => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: ADMINS_LIST_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            '/api/adminslist/',\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ADMINS_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n      \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ADMINS_LIST_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const removeAdmin = (aid) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: ADMINS_LIST_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/removeadmin/${aid}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ADMINS_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n      \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ADMINS_LIST_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const addAdmin = (name,email,phone) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: ADMINS_LIST_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/addadmin/`,\r\n            {'email':email,'name':name,'phone':phone},\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ADMINS_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n     \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ADMINS_LIST_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const deliverProduct = () => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type:DELIVER_PRODUCTS_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            '/api/deliverproducts/',\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: DELIVER_PRODUCTS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n      \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: DELIVER_PRODUCTS_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const deliverParticularProduct = (oid) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type:DELIVER_PRODUCTS_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/deliverproduct/${oid}`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: DELIVER_PRODUCTS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n      \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: DELIVER_PRODUCTS_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const returnProduct = () => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type:RETURN_PRODUCTS_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            '/api/returnproducts/',\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: RETURN_PRODUCTS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n      \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: RETURN_PRODUCTS_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const returnParticularProduct = (oid) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type:RETURN_PRODUCTS_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/returnproduct/${oid}`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: RETURN_PRODUCTS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n   \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: RETURN_PRODUCTS_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}","G:\\cavern\\frontend\\src\\screens\\Admins.js",["384","385","386","387","388","389"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Container,Form, Button,Table, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { adminlist } from '../actions/adminActions'\r\nimport { removeAdmin } from '../actions/adminActions'\r\nimport { addAdmin } from '../actions/adminActions'\r\nimport HomeScreen from './HomeScreen'\r\n\r\n\r\nfunction Admins ({history}){\r\n    const [name,setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [phone, setPhone] = useState('')\r\n    const dispatch = useDispatch()\r\n    const data = useSelector(state => state.adminsList)\r\n    const {error,loading, adminsList} = data\r\n    const userLogin = useSelector(state=>state.userLogin)\r\n    const {userInfo,loggingOut} = userLogin\r\n    useEffect(() => {\r\n        if(!userInfo)\r\n        {\r\n            history.push('/login')\r\n        }\r\n        dispatch(adminlist())\r\n    },[dispatch,userInfo])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(addAdmin(name,email,phone))\r\n        setName('')\r\n        setEmail('')\r\n        setPhone('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {loading||loggingOut\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    :adminsList\r\n                       ? (<div>\r\n                            <Container>\r\n                           <Form onSubmit={submitHandler} >\r\n                           <Form.Group controlId='name' >\r\n                          <Form.Control\r\n                          type=\"text\" placeholder=\"Name\" \r\n                          value={name}\r\n                          onChange={(e) => setName(e.target.value)}/>\r\n                          </Form.Group>\r\n                          <Form.Group controlId='email' >\r\n                         <Form.Control \r\n                        type=\"text\" placeholder=\"Email\"\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId='phone' >\r\n                        <Form.Control \r\n                        type=\"text\" placeholder=\"Phone number\"\r\n                        value={phone}\r\n                        onChange={(e) => setPhone(e.target.value)} />\r\n                        </Form.Group>\r\n                        <Button variant=\"primary\" type=\"submit\"> Add Admin </Button>\r\n                          </Form>\r\n                            </Container>\r\n\r\n                        <h1>Admins</h1>\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Email</th>\r\n                                    <th>Remove</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                             <tbody>\r\n                                {adminsList.map(data => (\r\n                                    <tr key={data.adminId}>\r\n                                         <td>{data.name}</td>\r\n                                        <td>{data.email}</td>\r\n                                        <td>\r\n                                            <Button  onClick={()=>dispatch(removeAdmin(data.adminId))} >Remove</Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody> \r\n                        </Table>\r\n                        </div>\r\n                    )\r\n                       :<div>\r\n                           <h1>home</h1>\r\n                       </div>\r\n                    }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Admins","G:\\cavern\\frontend\\src\\screens\\ReturnProducts.js",["390","391","392","393","394","395","396","397"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button,Table, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { returnProduct } from '../actions/adminActions'\r\nimport { returnParticularProduct } from '../actions/adminActions'\r\nimport HomeScreen from './HomeScreen'\r\n\r\n\r\nfunction ReturnProducts ({history}){\r\n    const dispatch = useDispatch()\r\n    const data = useSelector(state => state.returnProducts)\r\n    const {error,loading, returnProducts} = data\r\n    const userLogin = useSelector(state=>state.userLogin)\r\n    const {userInfo} = userLogin\r\n    useEffect(() => {\r\n        if(!userInfo)\r\n        {\r\n            history.push('/')\r\n        }\r\n        dispatch(returnProduct())\r\n    },[dispatch,userInfo])\r\n    return (\r\n        <div>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    :returnProducts\r\n                       ? (<div>\r\n                        <h1>Delivered Orders</h1>\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Id</th>\r\n                                    <th>Name</th>\r\n                                    <th>Email</th>\r\n                                    <th>Return</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                             <tbody>\r\n                                {returnProducts.map(data => (\r\n                                    <tr key={data.orderedItemId}>\r\n                                        <td>{data.orderedItemId}</td>\r\n                                         <td>{data.orderId.buyerId.name}</td>\r\n                                        <td>{data.orderId.buyerId.email}</td>\r\n                                        <td>\r\n                                            <Button  onClick={()=>dispatch(returnParticularProduct(data.orderedItemId))} >Returned</Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody> \r\n                        </Table>\r\n                        </div>\r\n                    )\r\n                       :<div>\r\n                           <h1>home</h1>\r\n                       </div>\r\n                    }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReturnProducts","G:\\cavern\\frontend\\src\\screens\\DeliverProducts.js",["398","399","400","401","402","403","404","405"],"\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button,Table, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { deliverProduct } from '../actions/adminActions'\r\nimport { deliverParticularProduct } from '../actions/adminActions'\r\nimport HomeScreen from './HomeScreen'\r\n\r\n\r\nfunction DeliverProducts ({history}){\r\n    const dispatch = useDispatch()\r\n    const data = useSelector(state => state.deliverProducts)\r\n    const {error,loading, deliverProducts} = data\r\n    const userLogin = useSelector(state=>state.userLogin)\r\n    const {userInfo,loggingOut} = userLogin\r\n    useEffect(() => {\r\n        if(!userInfo)\r\n        {\r\n            history.push('/')\r\n        }\r\n        dispatch(deliverProduct())\r\n    },[dispatch,userInfo])\r\n    return (\r\n        <div>\r\n            {loading||loggingOut\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    :deliverProducts\r\n                       ? (<div>\r\n                        <h1>Placed Orders</h1>\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Id</th>\r\n                                    <th>Name</th>\r\n                                    <th>email</th>\r\n                                    <th>Deliver</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                             <tbody>\r\n                                {deliverProducts.map(data => (\r\n                                    <tr key={data.orderedItemId}>\r\n                                        <td>{data.orderedItemId}</td>\r\n                                        <td>{data.orderId.buyerId.name}</td>\r\n                                        <td>{data.orderId.buyerId.email}</td>\r\n                                        <td>\r\n                                            <Button  onClick={()=>dispatch(deliverParticularProduct(data.orderedItemId))} >Delivered</Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody> \r\n                        </Table>\r\n                        </div>\r\n                    )\r\n                       :<div>\r\n                           <h1>home</h1>\r\n                       </div>\r\n                    }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeliverProducts","G:\\cavern\\frontend\\src\\screens\\AddOldStocks.js",["406","407","408","409","410","411"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Container,Form, Button,Table, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { addOldStock } from '../actions/sellerActions'\r\nimport { addOldParticularStock } from '../actions/sellerActions'\r\nimport HomeScreen from './HomeScreen'\r\n\r\n\r\nfunction AddOldStocks ({history}){\r\n    const dispatch = useDispatch()\r\n    const [StockId,setStockId]=useState('')\r\n    const [Quantity,setQuantity]=useState('')\r\n    const data = useSelector(state => state.addOldStocks)\r\n    const userLogin = useSelector(state=>state.userLogin)\r\n    const {userInfo,loggingOut} = userLogin\r\n     const {error,loading, addOldStocks} = data\r\n    useEffect(() => {\r\n        if(!userInfo)\r\n        {\r\n            history.push('/login')\r\n        }\r\n        if(userInfo){\r\n            dispatch(addOldStock(userInfo.sellerId))\r\n        }\r\n    },[dispatch,userInfo])\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(addOldParticularStock(userInfo.sellerId,StockId,Quantity))\r\n        setStockId('')\r\n        setQuantity('')\r\n    }\r\n    return (\r\n        <div>\r\n            {loading||loggingOut\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    :addOldStocks\r\n                       ? (<div>\r\n                           <Container>\r\n                           <Form onSubmit={submitHandler} >\r\n                           <Form.Group controlId='stockId' >\r\n                          <Form.Control\r\n                          type=\"text\" placeholder=\"StockId\" \r\n                          value={StockId}\r\n                          onChange={(e) => setStockId(e.target.value)}/>\r\n                          </Form.Group>\r\n                          <Form.Group controlId='quantity' >\r\n                         <Form.Control \r\n                        type=\"text\" placeholder=\"Quantity\"\r\n                        value={Quantity}\r\n                        onChange={(e) => setQuantity(e.target.value)} />\r\n                        </Form.Group>\r\n                        <Button variant=\"primary\" type=\"submit\"> Update Stock </Button>\r\n                          </Form>\r\n                            </Container>\r\n                        <h1>Existing Stocks</h1>\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>StockId</th>\r\n                                    <th>Name</th>\r\n                                    <th>Price</th>\r\n                                    <th>Last Updated</th>\r\n                                    <th>Available Quantity</th>\r\n                                    <th>Total Quantity</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                             <tbody>\r\n                                {addOldStocks.map(data => (\r\n                                    <tr key={data.stockId}>\r\n                                        <td>{data.stockId}</td>\r\n                                        <td>{data.productId.name}</td>\r\n                                        <td>{data.price}</td>\r\n                                        <td>{data.dateOfAddition.substring(0,10)}</td>\r\n                                        <td>{data.availableQuantity}</td>\r\n                                        <td>{data.totalQuantity}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody> \r\n                        </Table>\r\n                        </div>\r\n                    )\r\n                       :<div>\r\n                          <h1>No Items</h1>\r\n                       </div>\r\n                    }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddOldStocks\r\n\r\n\r\n\r\n\r\n ","G:\\cavern\\frontend\\src\\screens\\AddNewStocks.js",["412","413","414","415","416","417","418"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Container,Form, Button,Table, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { addNewStock } from '../actions/sellerActions'\r\nimport { addNewParticularStock } from '../actions/sellerActions'\r\nimport HomeScreen from './HomeScreen'\r\n\r\n\r\nfunction AddOldStocks ({history}){\r\n    const dispatch = useDispatch()\r\n    const [Name,setName]=useState('')\r\n    const [Brand,setBrand]=useState('')\r\n    const [Category,setCategory]=useState('Mobiles')\r\n    const [Details,setDetails]=useState('')\r\n    const [Price,setPrice]=useState('')\r\n    const [Quantity,setQuantity]=useState('')\r\n    const [selectedFile, setSelectedFile] = useState();\r\n   \tconst [isFilePicked, setIsFilePicked] = useState(false);\r\n    const data = useSelector(state => state.addNewStocks)\r\n    const userLogin = useSelector(state=>state.userLogin)\r\n    const {userInfo,loggingOut} = userLogin\r\n     const {error,loading, addNewStocks} = data\r\n    useEffect(() => {\r\n        if(!userInfo)\r\n        {\r\n            history.push('/login')\r\n        }\r\n        dispatch(addNewStock())\r\n    },[dispatch,userInfo])\r\n    const changeHandler = (event) => {\r\n\t\tsetSelectedFile(event.target.files[0])\r\n\t\tsetIsFilePicked(true)\r\n\t}\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(addNewParticularStock(userInfo.sellerId,Name,Brand,Category,Details,Price,Quantity,selectedFile))\r\n        setName('')\r\n        setBrand('')\r\n        setCategory('Mobiles')\r\n        setSelectedFile(null)\r\n        setIsFilePicked(false)\r\n        setDetails('')\r\n        setPrice('')\r\n        setQuantity('')\r\n    }\r\n    return (\r\n        <div>\r\n            {loading||loggingOut\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    :addNewStocks\r\n                       ? (<div>\r\n                        <FormContainer>\r\n                           <Form onSubmit={submitHandler}>\r\n                        <Form.Group >\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Name\" value={Name}\r\n                          onChange={(e) => setName(e.target.value)} />\r\n                        <Form.Label>Brand</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Brand\"  value={Brand}\r\n                          onChange={(e) => setBrand(e.target.value)} />\r\n                           <Form.Group >\r\n                             <Form.Label>Image</Form.Label>\r\n                            {isFilePicked ? (\r\n\t\t\t                        <Form.Control type=\"text\" placeholder=\"selected file details\" value={selectedFile.name}\r\n                           />\r\n\t\t                         \t) : (\r\n\t                \t\t\t<p>Select a file to show details</p>\r\n\t                      \t\t)}\r\n                      \r\n                        <Form.File label=\"Choose File\" custom  onChange ={(e)=>changeHandler(e)} ></Form.File>\r\n                      </Form.Group>\r\n                        <Form.Label>Category</Form.Label>\r\n                        <Form.Control as=\"select\"  value={Category}\r\n                          onChange={(e) => setCategory(e.target.value)} >\r\n                        <option>Mobiles</option>\r\n                        <option>Laptops</option>\r\n                        <option>Shoes</option>\r\n                        <option>Televisions</option>\r\n                        </Form.Control>\r\n                        <Form.Label>Details</Form.Label>\r\n                        <Form.Control as=\"textarea\" type=\"text\" placeholder=\"Details\"  value={Details}\r\n                          onChange={(e) => setDetails(e.target.value)} />\r\n                        <Form.Label>Price</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Price\"  value={Price}\r\n                          onChange={(e) => setPrice(e.target.value)}/>\r\n\r\n                        <Form.Label>Quantity</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Quantity\"  value={Quantity}\r\n                          onChange={(e) => setQuantity(e.target.value)}/>\r\n                        </Form.Group>\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                         Add Stock\r\n                        </Button>\r\n                </Form>\r\n                </FormContainer>\r\n                        </div>\r\n                    )\r\n                       :<div>\r\n                          <h1>No Items</h1>\r\n                       </div>\r\n                    }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddOldStocks\r\n\r\n\r\n\r\n\r\n ","G:\\cavern\\frontend\\src\\actions\\sellerActions.js",["419","420","421","422","423","424"],"import axios from 'axios'\r\nimport {\r\n    ADDSTOCKS_NEW_SUCCESS,\r\n    ADDSTOCKS_NEW_REQUEST,\r\n    ADDSTOCKS_NEW_FAIL,\r\n    ADDSTOCKS_NEW_RESET,\r\n    ADDSTOCKS_OLD_SUCCESS,\r\n    ADDSTOCKS_OLD_REQUEST,\r\n    ADDSTOCKS_OLD_FAIL,\r\n    ADDSTOCKS_OLD_RESET,\r\n    USER_ORDERS_PLACED_SUCCESS,\r\n    USER_ORDERS_PLACED_REQUEST,\r\n    USER_ORDERS_PLACED_FAIL,\r\n    USER_ORDERS_PLACED_RESET,\r\n    ADDOFFERS_SUCCESS,\r\n    ADDOFFERS_REQUEST,\r\n    ADDOFFERS_FAIL,\r\n    ADDOFFERS_RESET,\r\n    REMOVEOFFERS_SUCCESS,\r\n    REMOVEOFFERS_REQUEST,\r\n    REMOVEOFFERS_FAIL,\r\n    REMOVEOFFERS_RESET\r\n} from '../constants/sellerConstants'\r\n\r\nexport const addNewStock = () => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: ADDSTOCKS_NEW_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n        dispatch({\r\n            type: ADDSTOCKS_NEW_SUCCESS,\r\n            payload:[]\r\n        })\r\n\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ADDSTOCKS_NEW_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const addNewParticularStock = (sid,Name,Brand,Category,Details,Price,Quantity,file) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: ADDSTOCKS_NEW_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n       const {data} =  await axios.post(\r\n            `/api/addnewparticularstock/${sid}`,\r\n            {'Name':Name,'Brand':Brand,'Category':Category,'Details':Details,'Price':Price,'Quantity':Quantity},\r\n            config\r\n        )\r\n        const configuration ={\r\n            headers:{\r\n                'content-type':'multipart/form-data'\r\n            }\r\n        }\r\n        console.log(data)\r\n        const productId = data.productId.productId\r\n        const formData = new FormData();\r\n\r\n\t\tformData.append('file', file)\r\n        await axios.post(`/api/image/${productId}`,formData,configuration)\r\n\r\n        dispatch({\r\n            type: ADDSTOCKS_NEW_SUCCESS,\r\n            payload: []\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ADDSTOCKS_NEW_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const addOldStock = (sid) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: ADDSTOCKS_OLD_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/addoldstocks/${sid}`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ADDSTOCKS_OLD_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n     \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ADDSTOCKS_OLD_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const addOldParticularStock = (sid,skid,quantity) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: ADDSTOCKS_OLD_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/addoldparticularstock/${sid}/${skid}/${quantity}`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ADDSTOCKS_OLD_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n      \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ADDSTOCKS_OLD_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const userOrderRequest = (sid) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_ORDERS_PLACED_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n        const { data } = await axios.get(\r\n            `/api/userorderrequests/${sid}/`,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: USER_ORDERS_PLACED_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n      \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_ORDERS_PLACED_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const processRequest = (sid,oid) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_ORDERS_PLACED_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n        const { data } = await axios.get(\r\n            `/api/processrequest/${sid}/${oid}/`,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: USER_ORDERS_PLACED_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n     \r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_ORDERS_PLACED_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const addOffer = (sid) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: ADDOFFERS_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n        const { data } = await axios.get(\r\n            `/api/addoffers/${sid}/`,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: ADDOFFERS_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ADDOFFERS_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const addParticularOffer = (sid,skid,offer) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: ADDOFFERS_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n        const { data } = await axios.get(\r\n            `/api/addparticularoffer/${sid}/${skid}/${offer}/`,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: ADDOFFERS_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ADDOFFERS_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const removeOffer = (sid) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: REMOVEOFFERS_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n        const { data } = await axios.get(\r\n            `/api/removeoffers/${sid}`,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: REMOVEOFFERS_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: REMOVEOFFERS_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const removeParticularOffer = (sid,ofid) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: REMOVEOFFERS_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n        const { data } = await axios.get(\r\n            `/api/removeparticularoffer/${sid}/${ofid}/`,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: REMOVEOFFERS_SUCCESS,\r\n            payload:data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: REMOVEOFFERS_FAIL,\r\n            payload:error.response.data.message\r\n        })\r\n    }\r\n}","G:\\cavern\\frontend\\src\\constants\\sellerConstants.js",[],"G:\\cavern\\frontend\\src\\reducers\\sellerReducers.js",[],"G:\\cavern\\frontend\\src\\screens\\UserOrderRequests.js",["425","426","427","428","429","430","431","432"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button,Table, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { userOrderRequest } from '../actions/sellerActions'\r\nimport { processRequest } from '../actions/sellerActions'\r\nimport HomeScreen from './HomeScreen'\r\n\r\n\r\nfunction UserOrderRequests ({history}){\r\n    const dispatch = useDispatch()\r\n    const data = useSelector(state => state.userOrderRequests)\r\n    const userLogin = useSelector(state=>state.userLogin)\r\n    const {userInfo} = userLogin\r\n     const {error,loading, userOrderRequests} = data\r\n    useEffect(() => {\r\n        if(!userInfo)\r\n        {\r\n            history.push('/')\r\n        }\r\n        if(userInfo){\r\n        dispatch(userOrderRequest(userInfo.sellerId))\r\n        }\r\n    },[dispatch,userInfo])\r\n    return (\r\n        <div>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    :userOrderRequests\r\n                       ? (<div>\r\n                        <h1>User Orders</h1>\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Product Name</th>\r\n                                    <th>Name</th>\r\n                                    <th>Email</th>\r\n                                    <th>Date</th>\r\n                                    <th>Process</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                             <tbody>\r\n                                {userOrderRequests.map(data => (\r\n                                    <tr key={data.orderedItemId}>\r\n                                        <td>{data.stockId.productId.name}</td>\r\n                                        <td>{data.orderId.buyerId.name}</td>\r\n                                        <td>{data.orderId.buyerId.email}</td>\r\n                                        <td>{data.finalDate.substring(0,10)}</td>\r\n                                        <td>\r\n                                            <Button  onClick={()=>dispatch(processRequest(userInfo.sellerId,data.orderedItemId))} >Process</Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody> \r\n                        </Table>\r\n                        </div>\r\n                    )\r\n                       :<div>\r\n                          <h1>No Items</h1>\r\n                       </div>\r\n                    }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserOrderRequests\r\n\r\n","G:\\cavern\\frontend\\src\\screens\\AddOffers.js",["433","434","435","436","437","438"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Container,Form, Button,Table, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { addOffer } from '../actions/sellerActions'\r\n import { addParticularOffer } from '../actions/sellerActions'\r\nimport HomeScreen from './HomeScreen'\r\n\r\n\r\nfunction AddOffers ({history}){\r\n    const dispatch = useDispatch()\r\n    const [StockId,setStockId]=useState('')\r\n    const [Offer,setOffer]=useState('')\r\n    const data = useSelector(state => state.addOffers)\r\n    const userLogin = useSelector(state=>state.userLogin)\r\n    const {userInfo,loggingOut} = userLogin\r\n     const {error,loading, addOffers} = data\r\n    useEffect(() => {\r\n        if(!userInfo)\r\n        {\r\n            history.push('/login')\r\n        }\r\n        if(userInfo){\r\n        dispatch(addOffer(userInfo.sellerId))\r\n        }\r\n    },[dispatch,userInfo])\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(addParticularOffer(userInfo.sellerId,StockId,Offer))\r\n        setStockId('')\r\n        setOffer('')\r\n    }\r\n    return (\r\n        <div>\r\n            {loading||loggingOut\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    :addOffers\r\n                       ? (<div>\r\n                           <Container>\r\n                           <Form onSubmit={submitHandler} >\r\n                           <Form.Group controlId='stockId' >\r\n                          <Form.Control\r\n                          type=\"text\" placeholder=\"StockId\" \r\n                          value={StockId}\r\n                          onChange={(e) => setStockId(e.target.value)}/>\r\n                          </Form.Group>\r\n                          <Form.Group controlId='offer' >\r\n                         <Form.Control \r\n                        type=\"text\" placeholder=\"Percent\"\r\n                        value={Offer}\r\n                        onChange={(e) => setOffer(e.target.value)} />\r\n                        </Form.Group>\r\n                        <Button variant=\"primary\" type=\"submit\"> Add Offer </Button>\r\n                          </Form>\r\n                            </Container>\r\n                        <h1>Existing Stocks</h1>\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>StockId</th>\r\n                                    <th>Name</th>\r\n                                    <th>Price</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                             <tbody>\r\n                                {addOffers.map(data => (\r\n                                    <tr key={data.stockId}>\r\n                                         <td>{data.stockId}</td>\r\n                                         <td>{data.productId.name}</td>\r\n                                        <td>{data.price}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody> \r\n                        </Table>\r\n                        </div>\r\n                    )\r\n                       :<div>\r\n                          <h1>No Items</h1>\r\n                       </div>\r\n                    }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddOffers\r\n\r\n\r\n\r\n\r\n ","G:\\cavern\\frontend\\src\\screens\\RemoveOffers.js",["439","440","441","442","443","444","445","446"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button,Table, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { removeOffer } from '../actions/sellerActions'\r\nimport { removeParticularOffer } from '../actions/sellerActions'\r\nimport HomeScreen from './HomeScreen'\r\n\r\n\r\nfunction RemoveOffers ({history}){\r\n    const dispatch = useDispatch()\r\n    const data = useSelector(state => state.removeOffers)\r\n    const userLogin = useSelector(state=>state.userLogin)\r\n    const {userInfo} = userLogin\r\n     const {error,loading, removeOffers} = data\r\n    useEffect(() => {\r\n        if(!userInfo)\r\n        {\r\n            history.push('/')\r\n        }\r\n        if(userInfo){\r\n        dispatch(removeOffer(userInfo.sellerId))\r\n        }\r\n    },[dispatch,userInfo])\r\n    return (\r\n        <div>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    :removeOffers\r\n                       ? (<div>\r\n                        <h1>Offers</h1>\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Stock Id</th>\r\n                                    <th>Name</th>\r\n                                    <th>Price</th>\r\n                                    <th>offer Percent</th>\r\n                                    <th>Remove</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                             <tbody>\r\n                                {removeOffers.map(data => (\r\n                                    <tr key={data.offerId}>\r\n                                        <td>{data.stockId.stockId}</td>       \r\n                                        <td>{data.stockId.productId.name}</td>\r\n                                        <td>{data.stockId.price}</td>\r\n                                        <td>{data.discountPercent}</td>\r\n                                        <td>\r\n                                            <Button onClick={()=>dispatch(removeParticularOffer(userInfo.sellerId,data.offerId))} >Remove</Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody> \r\n                        </Table>\r\n                        </div>\r\n                    )\r\n                       :<div>\r\n                          <h1>No Items</h1>\r\n                       </div>\r\n                    }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RemoveOffers",{"ruleId":"447","replacedBy":"448"},{"ruleId":"449","replacedBy":"450"},{"ruleId":"451","severity":1,"message":"452","line":97,"column":7,"nodeType":"453","messageId":"454","endLine":97,"endColumn":33},{"ruleId":"451","severity":1,"message":"455","line":27,"column":9,"nodeType":"453","messageId":"454","endLine":27,"endColumn":17},{"ruleId":"451","severity":1,"message":"456","line":27,"column":18,"nodeType":"453","messageId":"454","endLine":27,"endColumn":27},{"ruleId":"451","severity":1,"message":"457","line":28,"column":10,"nodeType":"453","messageId":"454","endLine":28,"endColumn":15},{"ruleId":"451","severity":1,"message":"458","line":31,"column":10,"nodeType":"453","messageId":"454","endLine":31,"endColumn":18},{"ruleId":"451","severity":1,"message":"459","line":32,"column":9,"nodeType":"453","messageId":"454","endLine":32,"endColumn":17},{"ruleId":"451","severity":1,"message":"460","line":16,"column":5,"nodeType":"453","messageId":"454","endLine":16,"endColumn":26},{"ruleId":"451","severity":1,"message":"461","line":11,"column":5,"nodeType":"453","messageId":"454","endLine":11,"endColumn":27},{"ruleId":"451","severity":1,"message":"462","line":12,"column":5,"nodeType":"453","messageId":"454","endLine":12,"endColumn":27},{"ruleId":"451","severity":1,"message":"463","line":13,"column":5,"nodeType":"453","messageId":"454","endLine":13,"endColumn":24},{"ruleId":"451","severity":1,"message":"464","line":15,"column":5,"nodeType":"453","messageId":"454","endLine":15,"endColumn":27},{"ruleId":"451","severity":1,"message":"465","line":16,"column":5,"nodeType":"453","messageId":"454","endLine":16,"endColumn":27},{"ruleId":"451","severity":1,"message":"466","line":17,"column":5,"nodeType":"453","messageId":"454","endLine":17,"endColumn":24},{"ruleId":"451","severity":1,"message":"467","line":18,"column":5,"nodeType":"453","messageId":"454","endLine":18,"endColumn":25},{"ruleId":"451","severity":1,"message":"468","line":20,"column":5,"nodeType":"453","messageId":"454","endLine":20,"endColumn":27},{"ruleId":"451","severity":1,"message":"469","line":21,"column":5,"nodeType":"453","messageId":"454","endLine":21,"endColumn":27},{"ruleId":"451","severity":1,"message":"470","line":22,"column":5,"nodeType":"453","messageId":"454","endLine":22,"endColumn":24},{"ruleId":"451","severity":1,"message":"471","line":23,"column":5,"nodeType":"453","messageId":"454","endLine":23,"endColumn":25},{"ruleId":"451","severity":1,"message":"472","line":23,"column":5,"nodeType":"453","messageId":"454","endLine":23,"endColumn":22},{"ruleId":"451","severity":1,"message":"473","line":24,"column":5,"nodeType":"453","messageId":"454","endLine":24,"endColumn":22},{"ruleId":"451","severity":1,"message":"474","line":25,"column":5,"nodeType":"453","messageId":"454","endLine":25,"endColumn":19},{"ruleId":"451","severity":1,"message":"475","line":26,"column":5,"nodeType":"453","messageId":"454","endLine":26,"endColumn":20},{"ruleId":"451","severity":1,"message":"476","line":28,"column":5,"nodeType":"453","messageId":"454","endLine":28,"endColumn":24},{"ruleId":"451","severity":1,"message":"477","line":29,"column":5,"nodeType":"453","messageId":"454","endLine":29,"endColumn":24},{"ruleId":"451","severity":1,"message":"478","line":30,"column":5,"nodeType":"453","messageId":"454","endLine":30,"endColumn":21},{"ruleId":"451","severity":1,"message":"479","line":32,"column":5,"nodeType":"453","messageId":"454","endLine":32,"endColumn":24},{"ruleId":"451","severity":1,"message":"480","line":33,"column":5,"nodeType":"453","messageId":"454","endLine":33,"endColumn":24},{"ruleId":"451","severity":1,"message":"481","line":34,"column":5,"nodeType":"453","messageId":"454","endLine":34,"endColumn":21},{"ruleId":"451","severity":1,"message":"482","line":35,"column":5,"nodeType":"453","messageId":"454","endLine":35,"endColumn":22},{"ruleId":"451","severity":1,"message":"483","line":3,"column":10,"nodeType":"453","messageId":"454","endLine":3,"endColumn":13},{"ruleId":"451","severity":1,"message":"484","line":3,"column":14,"nodeType":"453","messageId":"454","endLine":3,"endColumn":18},{"ruleId":"451","severity":1,"message":"485","line":3,"column":45,"nodeType":"453","messageId":"454","endLine":3,"endColumn":48},{"ruleId":"451","severity":1,"message":"486","line":12,"column":22,"nodeType":"453","messageId":"454","endLine":12,"endColumn":32},{"ruleId":"487","severity":1,"message":"488","line":38,"column":46,"nodeType":"489","messageId":"490","endLine":38,"endColumn":48},{"ruleId":"487","severity":1,"message":"488","line":59,"column":47,"nodeType":"489","messageId":"490","endLine":59,"endColumn":49},{"ruleId":"451","severity":1,"message":"455","line":1,"column":17,"nodeType":"453","messageId":"454","endLine":1,"endColumn":25},{"ruleId":"487","severity":1,"message":"488","line":37,"column":21,"nodeType":"489","messageId":"490","endLine":37,"endColumn":23},{"ruleId":"451","severity":1,"message":"491","line":8,"column":10,"nodeType":"453","messageId":"454","endLine":8,"endColumn":21},{"ruleId":"451","severity":1,"message":"492","line":19,"column":12,"nodeType":"453","messageId":"454","endLine":19,"endColumn":17},{"ruleId":"493","severity":1,"message":"494","line":36,"column":7,"nodeType":"495","endLine":36,"endColumn":51,"suggestions":"496"},{"ruleId":"493","severity":1,"message":"497","line":45,"column":8,"nodeType":"495","endLine":45,"endColumn":57,"suggestions":"498"},{"ruleId":"487","severity":1,"message":"488","line":164,"column":71,"nodeType":"489","messageId":"490","endLine":164,"endColumn":73},{"ruleId":"487","severity":1,"message":"488","line":168,"column":89,"nodeType":"489","messageId":"490","endLine":168,"endColumn":91},{"ruleId":"487","severity":1,"message":"488","line":178,"column":89,"nodeType":"489","messageId":"490","endLine":178,"endColumn":91},{"ruleId":"451","severity":1,"message":"499","line":2,"column":10,"nodeType":"453","messageId":"454","endLine":2,"endColumn":14},{"ruleId":"487","severity":1,"message":"488","line":45,"column":54,"nodeType":"489","messageId":"490","endLine":45,"endColumn":56},{"ruleId":"487","severity":1,"message":"488","line":45,"column":94,"nodeType":"489","messageId":"490","endLine":45,"endColumn":96},{"ruleId":"487","severity":1,"message":"488","line":46,"column":33,"nodeType":"489","messageId":"490","endLine":46,"endColumn":35},{"ruleId":"487","severity":1,"message":"488","line":55,"column":37,"nodeType":"489","messageId":"490","endLine":55,"endColumn":39},{"ruleId":"487","severity":1,"message":"500","line":64,"column":22,"nodeType":"489","messageId":"490","endLine":64,"endColumn":24},{"ruleId":"487","severity":1,"message":"488","line":68,"column":36,"nodeType":"489","messageId":"490","endLine":68,"endColumn":38},{"ruleId":"487","severity":1,"message":"488","line":68,"column":72,"nodeType":"489","messageId":"490","endLine":68,"endColumn":74},{"ruleId":"487","severity":1,"message":"488","line":85,"column":46,"nodeType":"489","messageId":"490","endLine":85,"endColumn":48},{"ruleId":"487","severity":1,"message":"488","line":126,"column":35,"nodeType":"489","messageId":"490","endLine":126,"endColumn":37},{"ruleId":"487","severity":1,"message":"488","line":182,"column":38,"nodeType":"489","messageId":"490","endLine":182,"endColumn":40},{"ruleId":"451","severity":1,"message":"456","line":1,"column":27,"nodeType":"453","messageId":"454","endLine":1,"endColumn":36},{"ruleId":"451","severity":1,"message":"501","line":5,"column":10,"nodeType":"453","messageId":"454","endLine":5,"endColumn":22},{"ruleId":"451","severity":1,"message":"502","line":9,"column":10,"nodeType":"453","messageId":"454","endLine":9,"endColumn":25},{"ruleId":"451","severity":1,"message":"503","line":9,"column":27,"nodeType":"453","messageId":"454","endLine":9,"endColumn":46},{"ruleId":"451","severity":1,"message":"504","line":16,"column":12,"nodeType":"453","messageId":"454","endLine":16,"endColumn":20},{"ruleId":"451","severity":1,"message":"505","line":21,"column":19,"nodeType":"453","messageId":"454","endLine":21,"endColumn":26},{"ruleId":"451","severity":1,"message":"506","line":21,"column":27,"nodeType":"453","messageId":"454","endLine":21,"endColumn":34},{"ruleId":"451","severity":1,"message":"507","line":22,"column":12,"nodeType":"453","messageId":"454","endLine":22,"endColumn":17},{"ruleId":"451","severity":1,"message":"508","line":22,"column":27,"nodeType":"453","messageId":"454","endLine":22,"endColumn":34},{"ruleId":"451","severity":1,"message":"509","line":26,"column":22,"nodeType":"453","messageId":"454","endLine":26,"endColumn":32},{"ruleId":"451","severity":1,"message":"510","line":26,"column":43,"nodeType":"453","messageId":"454","endLine":26,"endColumn":53},{"ruleId":"451","severity":1,"message":"511","line":29,"column":22,"nodeType":"453","messageId":"454","endLine":29,"endColumn":36},{"ruleId":"451","severity":1,"message":"512","line":29,"column":47,"nodeType":"453","messageId":"454","endLine":29,"endColumn":61},{"ruleId":"451","severity":1,"message":"513","line":40,"column":11,"nodeType":"453","messageId":"454","endLine":40,"endColumn":26},{"ruleId":"493","severity":1,"message":"514","line":62,"column":8,"nodeType":"495","endLine":62,"endColumn":61,"suggestions":"515"},{"ruleId":"451","severity":1,"message":"516","line":65,"column":11,"nodeType":"453","messageId":"454","endLine":65,"endColumn":32},{"ruleId":"451","severity":1,"message":"517","line":69,"column":11,"nodeType":"453","messageId":"454","endLine":69,"endColumn":25},{"ruleId":"487","severity":1,"message":"488","line":147,"column":78,"nodeType":"489","messageId":"490","endLine":147,"endColumn":80},{"ruleId":"487","severity":1,"message":"500","line":151,"column":95,"nodeType":"489","messageId":"490","endLine":151,"endColumn":97},{"ruleId":"487","severity":1,"message":"500","line":151,"column":121,"nodeType":"489","messageId":"490","endLine":151,"endColumn":123},{"ruleId":"487","severity":1,"message":"500","line":151,"column":147,"nodeType":"489","messageId":"490","endLine":151,"endColumn":149},{"ruleId":"493","severity":1,"message":"518","line":55,"column":8,"nodeType":"495","endLine":55,"endColumn":54,"suggestions":"519"},{"ruleId":"520","severity":1,"message":"521","line":168,"column":37,"nodeType":"522","messageId":"523","endLine":168,"endColumn":57},{"ruleId":"451","severity":1,"message":"524","line":3,"column":33,"nodeType":"453","messageId":"454","endLine":3,"endColumn":36},{"ruleId":"451","severity":1,"message":"525","line":3,"column":46,"nodeType":"453","messageId":"454","endLine":3,"endColumn":52},{"ruleId":"487","severity":1,"message":"500","line":39,"column":22,"nodeType":"489","messageId":"490","endLine":39,"endColumn":24},{"ruleId":"451","severity":1,"message":"456","line":1,"column":27,"nodeType":"453","messageId":"454","endLine":1,"endColumn":36},{"ruleId":"451","severity":1,"message":"526","line":14,"column":13,"nodeType":"453","messageId":"454","endLine":14,"endColumn":26},{"ruleId":"451","severity":1,"message":"455","line":1,"column":17,"nodeType":"453","messageId":"454","endLine":1,"endColumn":25},{"ruleId":"487","severity":1,"message":"488","line":22,"column":38,"nodeType":"489","messageId":"490","endLine":22,"endColumn":40},{"ruleId":"451","severity":1,"message":"527","line":59,"column":11,"nodeType":"453","messageId":"454","endLine":59,"endColumn":17},{"ruleId":"451","severity":1,"message":"502","line":14,"column":5,"nodeType":"453","messageId":"454","endLine":14,"endColumn":20},{"ruleId":"451","severity":1,"message":"528","line":19,"column":5,"nodeType":"453","messageId":"454","endLine":19,"endColumn":24},{"ruleId":"451","severity":1,"message":"503","line":28,"column":5,"nodeType":"453","messageId":"454","endLine":28,"endColumn":24},{"ruleId":"451","severity":1,"message":"458","line":293,"column":26,"nodeType":"453","messageId":"454","endLine":293,"endColumn":34},{"ruleId":"451","severity":1,"message":"458","line":338,"column":26,"nodeType":"453","messageId":"454","endLine":338,"endColumn":34},{"ruleId":"451","severity":1,"message":"529","line":22,"column":5,"nodeType":"453","messageId":"454","endLine":22,"endColumn":30},{"ruleId":"451","severity":1,"message":"472","line":24,"column":5,"nodeType":"453","messageId":"454","endLine":24,"endColumn":22},{"ruleId":"451","severity":1,"message":"473","line":25,"column":5,"nodeType":"453","messageId":"454","endLine":25,"endColumn":22},{"ruleId":"451","severity":1,"message":"474","line":26,"column":5,"nodeType":"453","messageId":"454","endLine":26,"endColumn":19},{"ruleId":"451","severity":1,"message":"476","line":29,"column":5,"nodeType":"453","messageId":"454","endLine":29,"endColumn":24},{"ruleId":"451","severity":1,"message":"477","line":30,"column":5,"nodeType":"453","messageId":"454","endLine":30,"endColumn":24},{"ruleId":"451","severity":1,"message":"478","line":31,"column":5,"nodeType":"453","messageId":"454","endLine":31,"endColumn":21},{"ruleId":"451","severity":1,"message":"479","line":33,"column":5,"nodeType":"453","messageId":"454","endLine":33,"endColumn":24},{"ruleId":"451","severity":1,"message":"480","line":34,"column":5,"nodeType":"453","messageId":"454","endLine":34,"endColumn":24},{"ruleId":"451","severity":1,"message":"481","line":35,"column":5,"nodeType":"453","messageId":"454","endLine":35,"endColumn":21},{"ruleId":"487","severity":1,"message":"488","line":162,"column":56,"nodeType":"489","messageId":"490","endLine":162,"endColumn":58},{"ruleId":"487","severity":1,"message":"488","line":162,"column":96,"nodeType":"489","messageId":"490","endLine":162,"endColumn":98},{"ruleId":"487","severity":1,"message":"488","line":199,"column":55,"nodeType":"489","messageId":"490","endLine":199,"endColumn":57},{"ruleId":"487","severity":1,"message":"488","line":199,"column":95,"nodeType":"489","messageId":"490","endLine":199,"endColumn":97},{"ruleId":"451","severity":1,"message":"461","line":11,"column":5,"nodeType":"453","messageId":"454","endLine":11,"endColumn":27},{"ruleId":"451","severity":1,"message":"462","line":12,"column":5,"nodeType":"453","messageId":"454","endLine":12,"endColumn":27},{"ruleId":"451","severity":1,"message":"463","line":13,"column":5,"nodeType":"453","messageId":"454","endLine":13,"endColumn":24},{"ruleId":"451","severity":1,"message":"464","line":15,"column":5,"nodeType":"453","messageId":"454","endLine":15,"endColumn":27},{"ruleId":"451","severity":1,"message":"465","line":16,"column":5,"nodeType":"453","messageId":"454","endLine":16,"endColumn":27},{"ruleId":"451","severity":1,"message":"466","line":17,"column":5,"nodeType":"453","messageId":"454","endLine":17,"endColumn":24},{"ruleId":"487","severity":1,"message":"488","line":167,"column":56,"nodeType":"489","messageId":"490","endLine":167,"endColumn":58},{"ruleId":"487","severity":1,"message":"488","line":167,"column":96,"nodeType":"489","messageId":"490","endLine":167,"endColumn":98},{"ruleId":"451","severity":1,"message":"455","line":1,"column":17,"nodeType":"453","messageId":"454","endLine":1,"endColumn":25},{"ruleId":"451","severity":1,"message":"499","line":2,"column":10,"nodeType":"453","messageId":"454","endLine":2,"endColumn":14},{"ruleId":"451","severity":1,"message":"484","line":3,"column":10,"nodeType":"453","messageId":"454","endLine":3,"endColumn":14},{"ruleId":"451","severity":1,"message":"485","line":3,"column":30,"nodeType":"453","messageId":"454","endLine":3,"endColumn":33},{"ruleId":"451","severity":1,"message":"483","line":3,"column":35,"nodeType":"453","messageId":"454","endLine":3,"endColumn":38},{"ruleId":"451","severity":1,"message":"530","line":7,"column":8,"nodeType":"453","messageId":"454","endLine":7,"endColumn":21},{"ruleId":"451","severity":1,"message":"531","line":10,"column":8,"nodeType":"453","messageId":"454","endLine":10,"endColumn":18},{"ruleId":"493","severity":1,"message":"494","line":25,"column":7,"nodeType":"495","endLine":25,"endColumn":26,"suggestions":"532"},{"ruleId":"451","severity":1,"message":"455","line":1,"column":17,"nodeType":"453","messageId":"454","endLine":1,"endColumn":25},{"ruleId":"451","severity":1,"message":"499","line":2,"column":10,"nodeType":"453","messageId":"454","endLine":2,"endColumn":14},{"ruleId":"451","severity":1,"message":"484","line":3,"column":10,"nodeType":"453","messageId":"454","endLine":3,"endColumn":14},{"ruleId":"451","severity":1,"message":"485","line":3,"column":30,"nodeType":"453","messageId":"454","endLine":3,"endColumn":33},{"ruleId":"451","severity":1,"message":"483","line":3,"column":35,"nodeType":"453","messageId":"454","endLine":3,"endColumn":38},{"ruleId":"451","severity":1,"message":"530","line":7,"column":8,"nodeType":"453","messageId":"454","endLine":7,"endColumn":21},{"ruleId":"451","severity":1,"message":"531","line":10,"column":8,"nodeType":"453","messageId":"454","endLine":10,"endColumn":18},{"ruleId":"493","severity":1,"message":"494","line":25,"column":7,"nodeType":"495","endLine":25,"endColumn":26,"suggestions":"533"},{"ruleId":"451","severity":1,"message":"534","line":15,"column":5,"nodeType":"453","messageId":"454","endLine":15,"endColumn":26},{"ruleId":"451","severity":1,"message":"535","line":19,"column":5,"nodeType":"453","messageId":"454","endLine":19,"endColumn":27},{"ruleId":"451","severity":1,"message":"499","line":2,"column":10,"nodeType":"453","messageId":"454","endLine":2,"endColumn":14},{"ruleId":"451","severity":1,"message":"485","line":3,"column":40,"nodeType":"453","messageId":"454","endLine":3,"endColumn":43},{"ruleId":"451","severity":1,"message":"483","line":3,"column":45,"nodeType":"453","messageId":"454","endLine":3,"endColumn":48},{"ruleId":"451","severity":1,"message":"530","line":7,"column":8,"nodeType":"453","messageId":"454","endLine":7,"endColumn":21},{"ruleId":"451","severity":1,"message":"531","line":11,"column":8,"nodeType":"453","messageId":"454","endLine":11,"endColumn":18},{"ruleId":"493","severity":1,"message":"494","line":29,"column":7,"nodeType":"495","endLine":29,"endColumn":26,"suggestions":"536"},{"ruleId":"451","severity":1,"message":"455","line":1,"column":17,"nodeType":"453","messageId":"454","endLine":1,"endColumn":25},{"ruleId":"451","severity":1,"message":"499","line":2,"column":10,"nodeType":"453","messageId":"454","endLine":2,"endColumn":14},{"ruleId":"451","severity":1,"message":"484","line":3,"column":10,"nodeType":"453","messageId":"454","endLine":3,"endColumn":14},{"ruleId":"451","severity":1,"message":"485","line":3,"column":30,"nodeType":"453","messageId":"454","endLine":3,"endColumn":33},{"ruleId":"451","severity":1,"message":"483","line":3,"column":35,"nodeType":"453","messageId":"454","endLine":3,"endColumn":38},{"ruleId":"451","severity":1,"message":"530","line":7,"column":8,"nodeType":"453","messageId":"454","endLine":7,"endColumn":21},{"ruleId":"451","severity":1,"message":"531","line":10,"column":8,"nodeType":"453","messageId":"454","endLine":10,"endColumn":18},{"ruleId":"493","severity":1,"message":"494","line":25,"column":7,"nodeType":"495","endLine":25,"endColumn":26,"suggestions":"537"},{"ruleId":"451","severity":1,"message":"455","line":2,"column":17,"nodeType":"453","messageId":"454","endLine":2,"endColumn":25},{"ruleId":"451","severity":1,"message":"499","line":3,"column":10,"nodeType":"453","messageId":"454","endLine":3,"endColumn":14},{"ruleId":"451","severity":1,"message":"484","line":4,"column":10,"nodeType":"453","messageId":"454","endLine":4,"endColumn":14},{"ruleId":"451","severity":1,"message":"485","line":4,"column":30,"nodeType":"453","messageId":"454","endLine":4,"endColumn":33},{"ruleId":"451","severity":1,"message":"483","line":4,"column":35,"nodeType":"453","messageId":"454","endLine":4,"endColumn":38},{"ruleId":"451","severity":1,"message":"530","line":8,"column":8,"nodeType":"453","messageId":"454","endLine":8,"endColumn":21},{"ruleId":"451","severity":1,"message":"531","line":11,"column":8,"nodeType":"453","messageId":"454","endLine":11,"endColumn":18},{"ruleId":"493","severity":1,"message":"494","line":26,"column":7,"nodeType":"495","endLine":26,"endColumn":26,"suggestions":"538"},{"ruleId":"451","severity":1,"message":"499","line":2,"column":10,"nodeType":"453","messageId":"454","endLine":2,"endColumn":14},{"ruleId":"451","severity":1,"message":"485","line":3,"column":40,"nodeType":"453","messageId":"454","endLine":3,"endColumn":43},{"ruleId":"451","severity":1,"message":"483","line":3,"column":45,"nodeType":"453","messageId":"454","endLine":3,"endColumn":48},{"ruleId":"451","severity":1,"message":"530","line":7,"column":8,"nodeType":"453","messageId":"454","endLine":7,"endColumn":21},{"ruleId":"451","severity":1,"message":"531","line":10,"column":8,"nodeType":"453","messageId":"454","endLine":10,"endColumn":18},{"ruleId":"493","severity":1,"message":"494","line":29,"column":7,"nodeType":"495","endLine":29,"endColumn":26,"suggestions":"539"},{"ruleId":"451","severity":1,"message":"499","line":2,"column":10,"nodeType":"453","messageId":"454","endLine":2,"endColumn":14},{"ruleId":"451","severity":1,"message":"540","line":3,"column":10,"nodeType":"453","messageId":"454","endLine":3,"endColumn":19},{"ruleId":"451","severity":1,"message":"541","line":3,"column":33,"nodeType":"453","messageId":"454","endLine":3,"endColumn":38},{"ruleId":"451","severity":1,"message":"485","line":3,"column":40,"nodeType":"453","messageId":"454","endLine":3,"endColumn":43},{"ruleId":"451","severity":1,"message":"483","line":3,"column":45,"nodeType":"453","messageId":"454","endLine":3,"endColumn":48},{"ruleId":"451","severity":1,"message":"531","line":10,"column":8,"nodeType":"453","messageId":"454","endLine":10,"endColumn":18},{"ruleId":"493","severity":1,"message":"494","line":33,"column":7,"nodeType":"495","endLine":33,"endColumn":26,"suggestions":"542"},{"ruleId":"451","severity":1,"message":"543","line":6,"column":5,"nodeType":"453","messageId":"454","endLine":6,"endColumn":24},{"ruleId":"451","severity":1,"message":"544","line":10,"column":5,"nodeType":"453","messageId":"454","endLine":10,"endColumn":24},{"ruleId":"451","severity":1,"message":"545","line":14,"column":5,"nodeType":"453","messageId":"454","endLine":14,"endColumn":29},{"ruleId":"451","severity":1,"message":"546","line":18,"column":5,"nodeType":"453","messageId":"454","endLine":18,"endColumn":20},{"ruleId":"451","severity":1,"message":"547","line":22,"column":5,"nodeType":"453","messageId":"454","endLine":22,"endColumn":23},{"ruleId":"451","severity":1,"message":"527","line":31,"column":15,"nodeType":"453","messageId":"454","endLine":31,"endColumn":21},{"ruleId":"451","severity":1,"message":"455","line":1,"column":17,"nodeType":"453","messageId":"454","endLine":1,"endColumn":25},{"ruleId":"451","severity":1,"message":"499","line":2,"column":10,"nodeType":"453","messageId":"454","endLine":2,"endColumn":14},{"ruleId":"451","severity":1,"message":"484","line":3,"column":10,"nodeType":"453","messageId":"454","endLine":3,"endColumn":14},{"ruleId":"451","severity":1,"message":"485","line":3,"column":30,"nodeType":"453","messageId":"454","endLine":3,"endColumn":33},{"ruleId":"451","severity":1,"message":"483","line":3,"column":35,"nodeType":"453","messageId":"454","endLine":3,"endColumn":38},{"ruleId":"451","severity":1,"message":"530","line":7,"column":8,"nodeType":"453","messageId":"454","endLine":7,"endColumn":21},{"ruleId":"451","severity":1,"message":"531","line":10,"column":8,"nodeType":"453","messageId":"454","endLine":10,"endColumn":18},{"ruleId":"493","severity":1,"message":"494","line":25,"column":7,"nodeType":"495","endLine":25,"endColumn":26,"suggestions":"548"},{"ruleId":"451","severity":1,"message":"499","line":2,"column":10,"nodeType":"453","messageId":"454","endLine":2,"endColumn":14},{"ruleId":"451","severity":1,"message":"485","line":3,"column":40,"nodeType":"453","messageId":"454","endLine":3,"endColumn":43},{"ruleId":"451","severity":1,"message":"483","line":3,"column":45,"nodeType":"453","messageId":"454","endLine":3,"endColumn":48},{"ruleId":"451","severity":1,"message":"530","line":7,"column":8,"nodeType":"453","messageId":"454","endLine":7,"endColumn":21},{"ruleId":"451","severity":1,"message":"531","line":10,"column":8,"nodeType":"453","messageId":"454","endLine":10,"endColumn":18},{"ruleId":"493","severity":1,"message":"494","line":29,"column":7,"nodeType":"495","endLine":29,"endColumn":26,"suggestions":"549"},{"ruleId":"451","severity":1,"message":"455","line":1,"column":17,"nodeType":"453","messageId":"454","endLine":1,"endColumn":25},{"ruleId":"451","severity":1,"message":"499","line":2,"column":10,"nodeType":"453","messageId":"454","endLine":2,"endColumn":14},{"ruleId":"451","severity":1,"message":"484","line":3,"column":10,"nodeType":"453","messageId":"454","endLine":3,"endColumn":14},{"ruleId":"451","severity":1,"message":"485","line":3,"column":30,"nodeType":"453","messageId":"454","endLine":3,"endColumn":33},{"ruleId":"451","severity":1,"message":"483","line":3,"column":35,"nodeType":"453","messageId":"454","endLine":3,"endColumn":38},{"ruleId":"451","severity":1,"message":"530","line":7,"column":8,"nodeType":"453","messageId":"454","endLine":7,"endColumn":21},{"ruleId":"451","severity":1,"message":"531","line":10,"column":8,"nodeType":"453","messageId":"454","endLine":10,"endColumn":18},{"ruleId":"493","severity":1,"message":"494","line":27,"column":7,"nodeType":"495","endLine":27,"endColumn":26,"suggestions":"550"},"no-native-reassign",["551"],"no-negated-in-lhs",["552"],"no-unused-vars","'shippingAddressFromStorage' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'login' is defined but never used.","'userInfo' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'SAVE_SHIPPING_ADDRESS' is defined but never used.","'PRODUCT_DELETE_REQUEST' is defined but never used.","'PRODUCT_DELETE_SUCCESS' is defined but never used.","'PRODUCT_DELETE_FAIL' is defined but never used.","'PRODUCT_CREATE_REQUEST' is defined but never used.","'PRODUCT_CREATE_SUCCESS' is defined but never used.","'PRODUCT_CREATE_FAIL' is defined but never used.","'PRODUCT_CREATE_RESET' is defined but never used.","'PRODUCT_UPDATE_REQUEST' is defined but never used.","'PRODUCT_UPDATE_SUCCESS' is defined but never used.","'PRODUCT_UPDATE_FAIL' is defined but never used.","'PRODUCT_UPDATE_RESET' is defined but never used.","'USER_LIST_REQUEST' is defined but never used.","'USER_LIST_SUCCESS' is defined but never used.","'USER_LIST_FAIL' is defined but never used.","'USER_LIST_RESET' is defined but never used.","'USER_DELETE_REQUEST' is defined but never used.","'USER_DELETE_SUCCESS' is defined but never used.","'USER_DELETE_FAIL' is defined but never used.","'USER_UPDATE_REQUEST' is defined but never used.","'USER_UPDATE_SUCCESS' is defined but never used.","'USER_UPDATE_FAIL' is defined but never used.","'USER_UPDATE_RESET' is defined but never used.","'Col' is defined but never used.","'Form' is defined but never used.","'Row' is defined but never used.","'loggingOut' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'CART_UPDATE' is defined but never used.","'fetch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["553"],"React Hook useEffect has a missing dependency: 'product'. Either include it or remove the dependency array.",["554"],"'Link' is defined but never used.","Expected '!==' and instead saw '!='.","'PayPalButton' is defined but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","'sdkReady' is assigned a value but never used.","'succeed' is assigned a value but never used.","'mistake' is assigned a value but never used.","'wrong' is assigned a value but never used.","'success' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","'successPay' is assigned a value but never used.","'loadingDeliver' is assigned a value but never used.","'successDeliver' is assigned a value but never used.","'addPayPalScript' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'orderId'. Either include them or remove the dependency array.",["555"],"'successPaymentHandler' is assigned a value but never used.","'deliverHandler' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'cartItems', 'order.orderId', and 'paymentMethod'. Either include them or remove the dependency array.",["556"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'Nav' is defined but never used.","'Sonnet' is defined but never used.","'paymentMethod' is assigned a value but never used.","'config' is assigned a value but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","'FormContainer' is defined but never used.","'HomeScreen' is defined but never used.",["557"],["558"],"'RETURN_PRODUCTS_RESET' is defined but never used.","'DELIVER_PRODUCTS_RESET' is defined but never used.",["559"],["560"],["561"],["562"],"'Container' is defined but never used.","'Table' is defined but never used.",["563"],"'ADDSTOCKS_NEW_RESET' is defined but never used.","'ADDSTOCKS_OLD_RESET' is defined but never used.","'USER_ORDERS_PLACED_RESET' is defined but never used.","'ADDOFFERS_RESET' is defined but never used.","'REMOVEOFFERS_RESET' is defined but never used.",["564"],["565"],["566"],"no-global-assign","no-unsafe-negation",{"desc":"567","fix":"568"},{"desc":"569","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},{"desc":"575","fix":"577"},{"desc":"575","fix":"578"},{"desc":"575","fix":"579"},{"desc":"575","fix":"580"},{"desc":"575","fix":"581"},{"desc":"575","fix":"582"},{"desc":"575","fix":"583"},{"desc":"575","fix":"584"},{"desc":"575","fix":"585"},"Update the dependencies array to be: [dispatch, stockId, qty, userInfo, loggingOut, history]",{"range":"586","text":"587"},"Update the dependencies array to be: [dispatch, match.params.id, product, successProductReview]",{"range":"588","text":"589"},"Update the dependencies array to be: [dispatch, userInfo, receiving, cancelorder, returnorder, orderId, history]",{"range":"590","text":"591"},"Update the dependencies array to be: [dispatch, success, history, receiving, userInfo, paymentMethod, cartItems, order.orderId]",{"range":"592","text":"593"},"Update the dependencies array to be: [dispatch, history, userInfo]",{"range":"594","text":"595"},{"range":"596","text":"595"},{"range":"597","text":"595"},{"range":"598","text":"595"},{"range":"599","text":"595"},{"range":"600","text":"595"},{"range":"601","text":"595"},{"range":"602","text":"595"},{"range":"603","text":"595"},{"range":"604","text":"595"},[1226,1270],"[dispatch, stockId, qty, userInfo, loggingOut, history]",[1673,1722],"[dispatch, match.params.id, product, successProductReview]",[2425,2478],"[dispatch, userInfo, receiving, cancelorder, returnorder, orderId, history]",[2118,2164],"[dispatch, success, history, receiving, userInfo, paymentMethod, cartItems, order.orderId]",[938,957],"[dispatch, history, userInfo]",[946,965],[1114,1133],[943,962],[962,981],[1107,1126],[1346,1365],[952,971],[1080,1099],[985,1004]]